{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Introduction"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"examples/","text":"Examples Here are some examples which help you to get started with the library. Builders See the builders section for examples on how to use the builders classes to create unit files. install service socket unit Main See the main section for examples on how to use generated sections to create unit files. main","title":"Examples"},{"location":"examples/#examples","text":"Here are some examples which help you to get started with the library.","title":"Examples"},{"location":"examples/#builders","text":"See the builders section for examples on how to use the builders classes to create unit files. install service socket unit","title":"Builders"},{"location":"examples/#main","text":"See the main section for examples on how to use generated sections to create unit files. main","title":"Main"},{"location":"examples/SUMMARY/","text":"Examples Builders install service socket unit Systemd Generator Utilities","title":"SUMMARY"},{"location":"examples/builders/","text":"Builders Examples install - Build the install section for a service file. service - Build the service section for a service file. socket - Build the socket section for a service file. unit - Build the unit section for a service file.","title":"Builders"},{"location":"examples/builders/#builders-examples","text":"install - Build the install section for a service file. service - Build the service section for a service file. socket - Build the socket section for a service file. unit - Build the unit section for a service file.","title":"Builders Examples"},{"location":"examples/builders/install/","text":"Install Builder Example This example shows how to use the InstallBuilder to create unit file [ Install ] section. install_builder.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from systemd_py import InstallBuilder def main (): builder = InstallBuilder () builder . with_wanted_by ([ \"multi-user.target\" ]) builder . with_required_by ([ \"graphical.target\" ]) builder . with_alias ([ \"my-alias.service\" ]) section = builder . build () print ( section ) if __name__ == \"__main__\" : main () output 1 2 3 [ Socket ] ListenStream = '8000' Accept = 'true'","title":"install"},{"location":"examples/builders/install/#install-builder-example","text":"This example shows how to use the InstallBuilder to create unit file [ Install ] section. install_builder.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from systemd_py import InstallBuilder def main (): builder = InstallBuilder () builder . with_wanted_by ([ \"multi-user.target\" ]) builder . with_required_by ([ \"graphical.target\" ]) builder . with_alias ([ \"my-alias.service\" ]) section = builder . build () print ( section ) if __name__ == \"__main__\" : main () output 1 2 3 [ Socket ] ListenStream = '8000' Accept = 'true'","title":"Install Builder Example"},{"location":"examples/builders/service/","text":"Service Builder Example This example shows how to use the ServiceBuilder to create unit file [ Service ] section. service_builder.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from systemd_py import ServiceBuilder def main (): builder = ServiceBuilder () builder . with_type ( \"simple\" ) builder . with_exec_start ([ \"/usr/bin/python3\" , \"-m\" , \"http.server\" , \"8000\" ]) builder . with_exec_stop ([ \"/usr/bin/kill\" , \"$MAINPID\" ]) builder . with_restart ( \"on-failure\" ) section = builder . build () print ( section ) if __name__ == \"__main__\" : main () output 1 2 3 4 5 [ Service ] Type = 'simple' ExecStart = '/usr/bin/python3 -m http.server 8000' ExecStop = '/usr/bin/kill $MAINPID' Restart = 'on-failure'","title":"service"},{"location":"examples/builders/service/#service-builder-example","text":"This example shows how to use the ServiceBuilder to create unit file [ Service ] section. service_builder.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from systemd_py import ServiceBuilder def main (): builder = ServiceBuilder () builder . with_type ( \"simple\" ) builder . with_exec_start ([ \"/usr/bin/python3\" , \"-m\" , \"http.server\" , \"8000\" ]) builder . with_exec_stop ([ \"/usr/bin/kill\" , \"$MAINPID\" ]) builder . with_restart ( \"on-failure\" ) section = builder . build () print ( section ) if __name__ == \"__main__\" : main () output 1 2 3 4 5 [ Service ] Type = 'simple' ExecStart = '/usr/bin/python3 -m http.server 8000' ExecStop = '/usr/bin/kill $MAINPID' Restart = 'on-failure'","title":"Service Builder Example"},{"location":"examples/builders/socket/","text":"Socket Builder Example This example shows how to use the SocketBuilder to create unit file [ Socket ] section. socket_builder.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from systemd_py import SocketBuilder def main (): builder = SocketBuilder () builder . with_listen_stream ([ \"8000\" ]) builder . with_accept ( True ) section = builder . build () print ( section ) if __name__ == \"__main__\" : main () output 1 2 3 4 5 [ Service ] Type = 'simple' ExecStart = '/usr/bin/python3 -m http.server 8000' ExecStop = '/usr/bin/kill $MAINPID' Restart = 'on-failure'","title":"socket"},{"location":"examples/builders/socket/#socket-builder-example","text":"This example shows how to use the SocketBuilder to create unit file [ Socket ] section. socket_builder.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from systemd_py import SocketBuilder def main (): builder = SocketBuilder () builder . with_listen_stream ([ \"8000\" ]) builder . with_accept ( True ) section = builder . build () print ( section ) if __name__ == \"__main__\" : main () output 1 2 3 4 5 [ Service ] Type = 'simple' ExecStart = '/usr/bin/python3 -m http.server 8000' ExecStop = '/usr/bin/kill $MAINPID' Restart = 'on-failure'","title":"Socket Builder Example"},{"location":"examples/builders/unit/","text":"Unit Builder Example This example shows how to use the UnitBuilder to create unit file [ Unit ] section. unit_builder.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from systemd_py import UnitBuilder def main (): builder = UnitBuilder () builder . with_description ( \"Example service\" ) builder . with_after ([ \"network.target\" ]) builder . with_wants ([ \"network.target\" ]) builder . with_requires ([ \"network.target\" ]) section = builder . build () print ( section ) if __name__ == \"__main__\" : main () output 1 2 3 4 5 [ Unit ] Description = 'Example service' Requires = 'network.target' Wants = 'network.target' After = 'network.target'","title":"unit"},{"location":"examples/builders/unit/#unit-builder-example","text":"This example shows how to use the UnitBuilder to create unit file [ Unit ] section. unit_builder.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from systemd_py import UnitBuilder def main (): builder = UnitBuilder () builder . with_description ( \"Example service\" ) builder . with_after ([ \"network.target\" ]) builder . with_wants ([ \"network.target\" ]) builder . with_requires ([ \"network.target\" ]) section = builder . build () print ( section ) if __name__ == \"__main__\" : main () output 1 2 3 4 5 [ Unit ] Description = 'Example service' Requires = 'network.target' Wants = 'network.target' After = 'network.target'","title":"Unit Builder Example"},{"location":"examples/systemd-generator/","text":"Systemd Generator Example This example shows how to use the systemd_py.Systemd to create unit file. install_builder.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 from systemd_py import Systemd from systemd_py import InstallBuilder , ServiceBuilder , SocketBuilder , UnitBuilder from systemd_py import Install , Service , Socket , Unit def build_install () -> Install : builder = InstallBuilder () builder . with_wanted_by ([ \"multi-user.target\" ]) builder . with_required_by ([ \"graphical.target\" ]) builder . with_alias ([ \"my-alias.service\" ]) section = builder . build () return section def build_service () -> Service : builder = ServiceBuilder () builder . with_type ( \"simple\" ) builder . with_exec_start ([ \"/usr/bin/python3\" , \"-m\" , \"http.server\" , \"8000\" ]) builder . with_exec_stop ([ \"/usr/bin/kill\" , \"$MAINPID\" ]) builder . with_restart ( \"on-failure\" ) section = builder . build () return section def build_socket () -> Socket : builder = SocketBuilder () builder . with_listen_stream ([ \"8000\" ]) builder . with_accept ( True ) section = builder . build () return section def build_unit () -> Unit : builder = UnitBuilder () builder . with_description ( \"Example service\" ) builder . with_after ([ \"network.target\" ]) builder . with_wants ([ \"network.target\" ]) builder . with_requires ([ \"network.target\" ]) section = builder . build () return section def main (): install = build_install () service = build_service () socket = build_socket () unit = build_unit () systemd = Systemd ( \"my-service\" , [ install , service , socket , unit ]) my_service = systemd . create () print ( my_service ) if __name__ == \"__main__\" : main () output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # my-service.service [ Install ] WantedBy = 'multi-user.target' RequiredBy = 'graphical.target' Alias = 'my-alias.service' [ Service ] Type = 'simple' ExecStart = '/usr/bin/python3 -m http.server 8000' ExecStop = '/usr/bin/kill $MAINPID' Restart = 'on-failure' [ Socket ] ListenStream = '8000' Accept = 'true' [ Unit ] Description = 'Example service' Requires = 'network.target' Wants = 'network.target' After = 'network.target' # Via systemd_py","title":"Systemd Generator"},{"location":"examples/systemd-generator/#systemd-generator-example","text":"This example shows how to use the systemd_py.Systemd to create unit file. install_builder.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 from systemd_py import Systemd from systemd_py import InstallBuilder , ServiceBuilder , SocketBuilder , UnitBuilder from systemd_py import Install , Service , Socket , Unit def build_install () -> Install : builder = InstallBuilder () builder . with_wanted_by ([ \"multi-user.target\" ]) builder . with_required_by ([ \"graphical.target\" ]) builder . with_alias ([ \"my-alias.service\" ]) section = builder . build () return section def build_service () -> Service : builder = ServiceBuilder () builder . with_type ( \"simple\" ) builder . with_exec_start ([ \"/usr/bin/python3\" , \"-m\" , \"http.server\" , \"8000\" ]) builder . with_exec_stop ([ \"/usr/bin/kill\" , \"$MAINPID\" ]) builder . with_restart ( \"on-failure\" ) section = builder . build () return section def build_socket () -> Socket : builder = SocketBuilder () builder . with_listen_stream ([ \"8000\" ]) builder . with_accept ( True ) section = builder . build () return section def build_unit () -> Unit : builder = UnitBuilder () builder . with_description ( \"Example service\" ) builder . with_after ([ \"network.target\" ]) builder . with_wants ([ \"network.target\" ]) builder . with_requires ([ \"network.target\" ]) section = builder . build () return section def main (): install = build_install () service = build_service () socket = build_socket () unit = build_unit () systemd = Systemd ( \"my-service\" , [ install , service , socket , unit ]) my_service = systemd . create () print ( my_service ) if __name__ == \"__main__\" : main () output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # my-service.service [ Install ] WantedBy = 'multi-user.target' RequiredBy = 'graphical.target' Alias = 'my-alias.service' [ Service ] Type = 'simple' ExecStart = '/usr/bin/python3 -m http.server 8000' ExecStop = '/usr/bin/kill $MAINPID' Restart = 'on-failure' [ Socket ] ListenStream = '8000' Accept = 'true' [ Unit ] Description = 'Example service' Requires = 'network.target' Wants = 'network.target' After = 'network.target' # Via systemd_py","title":"Systemd Generator Example"},{"location":"examples/utilities/","text":"Systemd Utilities This example shows how to use the systemd_py.core.models.Section to load a systemd section load_from_string.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from systemd_py.core.models import Section def main (): text = \"\"\" [Service] Type='simple' ExecStart='adsas' User='root' \"\"\" section = Section . load_from_string ( text ) print ( section ) print ( type ( section )) if __name__ == \"__main__\" : main () load_from_string_with_model.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from systemd_py.core.models import Section from systemd_py.core.models import Service def main (): text = \"\"\" [Service] Type='simple' ExecStart='adsas' User='root' \"\"\" section = Section . load_from_string ( text , model = Service ) print ( section ) print ( type ( section )) if __name__ == \"__main__\" : main () load_from_string_with_section_name.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from systemd_py.core.models import Section def main (): text = \"\"\" [Service] Type='simple' ExecStart='adsas' User='root' \"\"\" section = Section . load_from_string ( text , model = \"Service\" ) print ( section ) print ( type ( section )) if __name__ == \"__main__\" : main () output 1 2 3 4 5 [ Service ] Type = 'simple' ExecStart = 'adsas' User = 'root' <class 'systemd_py.core.models.service.Service' >","title":"Utilities"},{"location":"examples/utilities/#systemd-utilities","text":"This example shows how to use the systemd_py.core.models.Section to load a systemd section load_from_string.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from systemd_py.core.models import Section def main (): text = \"\"\" [Service] Type='simple' ExecStart='adsas' User='root' \"\"\" section = Section . load_from_string ( text ) print ( section ) print ( type ( section )) if __name__ == \"__main__\" : main () load_from_string_with_model.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 from systemd_py.core.models import Section from systemd_py.core.models import Service def main (): text = \"\"\" [Service] Type='simple' ExecStart='adsas' User='root' \"\"\" section = Section . load_from_string ( text , model = Service ) print ( section ) print ( type ( section )) if __name__ == \"__main__\" : main () load_from_string_with_section_name.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from systemd_py.core.models import Section def main (): text = \"\"\" [Service] Type='simple' ExecStart='adsas' User='root' \"\"\" section = Section . load_from_string ( text , model = \"Service\" ) print ( section ) print ( type ( section )) if __name__ == \"__main__\" : main () output 1 2 3 4 5 [ Service ] Type = 'simple' ExecStart = 'adsas' User = 'root' <class 'systemd_py.core.models.service.Service' >","title":"Systemd Utilities"},{"location":"reference/SUMMARY/","text":"builders install service socket unit commands cli interactive core models install service socket unit exceptions interactive simple_builder main utils daemon files terminal clear inputer","title":"SUMMARY"},{"location":"reference/exceptions/","text":"SystemdPyError Bases: Exception Base class for all exceptions raised by systemd_py. Source code in systemd_py/exceptions.py 1 2 class SystemdPyError ( Exception ): \"\"\"Base class for all exceptions raised by systemd_py.\"\"\"","title":"exceptions"},{"location":"reference/exceptions/#systemd_py.exceptions.SystemdPyError","text":"Bases: Exception Base class for all exceptions raised by systemd_py. Source code in systemd_py/exceptions.py 1 2 class SystemdPyError ( Exception ): \"\"\"Base class for all exceptions raised by systemd_py.\"\"\"","title":"SystemdPyError"},{"location":"reference/main/","text":"Systemd Create systemd service file Source code in systemd_py/main.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 class Systemd : \"\"\" Create systemd service file \"\"\" def __init__ ( self , name : str , sections : List [ Section ]): \"\"\" Create systemd service file :param name: Name of the systemd service :type name: str :param sections: List of sections :type sections: List[Section] \"\"\" self . _name = name self . _sections = sections self . _service = None self . daemon = Daemon ( name ) def create ( self ) -> str : \"\"\" Build systemd service file :return: systemd service file :rtype: str \"\"\" header = f '# { self . _name } .service \\n\\n ' sections = \" \\n\\n \" . join ( [ str ( s ) for s in self . _sections if str ( s ) != '' and str ( s ) is not None and not str ( s ) . isspace ()] ) footer = f \" \\n\\n # Via systemd_py\" self . _service = header + sections + footer return self . _service def save ( self , path : str ) -> None : \"\"\" Save systemd service file :param path: Path to save systemd service file :type path: str :return: None :rtype: None \"\"\" if self . _service is None : self . create () path = get_file ( self . _name , path ) with open ( path , 'w' ) as f : f . write ( self . _service ) print ( f 'Saved { path } ' ) def save_in_os ( self ) -> None : \"\"\" Save systemd service file in /etc/systemd/system :return: None :rtype: None \"\"\" self . save ( '/etc/systemd/system' ) def start_service ( self ): \"\"\" Start service :return: None :rtype: None \"\"\" self . daemon . reload () self . daemon . enable () self . daemon . start () def __str__ ( self ): if self . _service is None : self . create () return self . _service def __repr__ ( self ): return self . __str__ () __init__ ( name , sections ) Create systemd service file Parameters: Name Type Description Default name str Name of the systemd service required sections List [ Section ] List of sections required Source code in systemd_py/main.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def __init__ ( self , name : str , sections : List [ Section ]): \"\"\" Create systemd service file :param name: Name of the systemd service :type name: str :param sections: List of sections :type sections: List[Section] \"\"\" self . _name = name self . _sections = sections self . _service = None self . daemon = Daemon ( name ) create () Build systemd service file Returns: Type Description str systemd service file Source code in systemd_py/main.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def create ( self ) -> str : \"\"\" Build systemd service file :return: systemd service file :rtype: str \"\"\" header = f '# { self . _name } .service \\n\\n ' sections = \" \\n\\n \" . join ( [ str ( s ) for s in self . _sections if str ( s ) != '' and str ( s ) is not None and not str ( s ) . isspace ()] ) footer = f \" \\n\\n # Via systemd_py\" self . _service = header + sections + footer return self . _service save ( path ) Save systemd service file Parameters: Name Type Description Default path str Path to save systemd service file required Returns: Type Description None None Source code in systemd_py/main.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def save ( self , path : str ) -> None : \"\"\" Save systemd service file :param path: Path to save systemd service file :type path: str :return: None :rtype: None \"\"\" if self . _service is None : self . create () path = get_file ( self . _name , path ) with open ( path , 'w' ) as f : f . write ( self . _service ) print ( f 'Saved { path } ' ) save_in_os () Save systemd service file in /etc/systemd/system Returns: Type Description None None Source code in systemd_py/main.py 70 71 72 73 74 75 76 77 78 def save_in_os ( self ) -> None : \"\"\" Save systemd service file in /etc/systemd/system :return: None :rtype: None \"\"\" self . save ( '/etc/systemd/system' ) start_service () Start service Returns: Type Description None None Source code in systemd_py/main.py 80 81 82 83 84 85 86 87 88 89 90 def start_service ( self ): \"\"\" Start service :return: None :rtype: None \"\"\" self . daemon . reload () self . daemon . enable () self . daemon . start ()","title":"main"},{"location":"reference/main/#systemd_py.main.Systemd","text":"Create systemd service file Source code in systemd_py/main.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 class Systemd : \"\"\" Create systemd service file \"\"\" def __init__ ( self , name : str , sections : List [ Section ]): \"\"\" Create systemd service file :param name: Name of the systemd service :type name: str :param sections: List of sections :type sections: List[Section] \"\"\" self . _name = name self . _sections = sections self . _service = None self . daemon = Daemon ( name ) def create ( self ) -> str : \"\"\" Build systemd service file :return: systemd service file :rtype: str \"\"\" header = f '# { self . _name } .service \\n\\n ' sections = \" \\n\\n \" . join ( [ str ( s ) for s in self . _sections if str ( s ) != '' and str ( s ) is not None and not str ( s ) . isspace ()] ) footer = f \" \\n\\n # Via systemd_py\" self . _service = header + sections + footer return self . _service def save ( self , path : str ) -> None : \"\"\" Save systemd service file :param path: Path to save systemd service file :type path: str :return: None :rtype: None \"\"\" if self . _service is None : self . create () path = get_file ( self . _name , path ) with open ( path , 'w' ) as f : f . write ( self . _service ) print ( f 'Saved { path } ' ) def save_in_os ( self ) -> None : \"\"\" Save systemd service file in /etc/systemd/system :return: None :rtype: None \"\"\" self . save ( '/etc/systemd/system' ) def start_service ( self ): \"\"\" Start service :return: None :rtype: None \"\"\" self . daemon . reload () self . daemon . enable () self . daemon . start () def __str__ ( self ): if self . _service is None : self . create () return self . _service def __repr__ ( self ): return self . __str__ ()","title":"Systemd"},{"location":"reference/main/#systemd_py.main.Systemd.__init__","text":"Create systemd service file Parameters: Name Type Description Default name str Name of the systemd service required sections List [ Section ] List of sections required Source code in systemd_py/main.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def __init__ ( self , name : str , sections : List [ Section ]): \"\"\" Create systemd service file :param name: Name of the systemd service :type name: str :param sections: List of sections :type sections: List[Section] \"\"\" self . _name = name self . _sections = sections self . _service = None self . daemon = Daemon ( name )","title":"__init__()"},{"location":"reference/main/#systemd_py.main.Systemd.create","text":"Build systemd service file Returns: Type Description str systemd service file Source code in systemd_py/main.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def create ( self ) -> str : \"\"\" Build systemd service file :return: systemd service file :rtype: str \"\"\" header = f '# { self . _name } .service \\n\\n ' sections = \" \\n\\n \" . join ( [ str ( s ) for s in self . _sections if str ( s ) != '' and str ( s ) is not None and not str ( s ) . isspace ()] ) footer = f \" \\n\\n # Via systemd_py\" self . _service = header + sections + footer return self . _service","title":"create()"},{"location":"reference/main/#systemd_py.main.Systemd.save","text":"Save systemd service file Parameters: Name Type Description Default path str Path to save systemd service file required Returns: Type Description None None Source code in systemd_py/main.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 def save ( self , path : str ) -> None : \"\"\" Save systemd service file :param path: Path to save systemd service file :type path: str :return: None :rtype: None \"\"\" if self . _service is None : self . create () path = get_file ( self . _name , path ) with open ( path , 'w' ) as f : f . write ( self . _service ) print ( f 'Saved { path } ' )","title":"save()"},{"location":"reference/main/#systemd_py.main.Systemd.save_in_os","text":"Save systemd service file in /etc/systemd/system Returns: Type Description None None Source code in systemd_py/main.py 70 71 72 73 74 75 76 77 78 def save_in_os ( self ) -> None : \"\"\" Save systemd service file in /etc/systemd/system :return: None :rtype: None \"\"\" self . save ( '/etc/systemd/system' )","title":"save_in_os()"},{"location":"reference/main/#systemd_py.main.Systemd.start_service","text":"Start service Returns: Type Description None None Source code in systemd_py/main.py 80 81 82 83 84 85 86 87 88 89 90 def start_service ( self ): \"\"\" Start service :return: None :rtype: None \"\"\" self . daemon . reload () self . daemon . enable () self . daemon . start ()","title":"start_service()"},{"location":"reference/builders/","text":"Builders for systemd_py Set of builder tools for help ypu build each section for systemd service files. Install Builder - Build the install section for a service file. Service Builder - Build the service section for a service file. Socket Builder - Build the socket section for a service file. Unit Builder - Build the unit section for a service file.","title":"builders"},{"location":"reference/builders/#systemd_py.builders--builders-for-systemd_py","text":"Set of builder tools for help ypu build each section for systemd service files. Install Builder - Build the install section for a service file. Service Builder - Build the service section for a service file. Socket Builder - Build the socket section for a service file. Unit Builder - Build the unit section for a service file.","title":"Builders for systemd_py"},{"location":"reference/builders/install/","text":"Install Builder \ud83c\udfd7\ufe0f Builder for the install section of a systemd service file. InstallBuilder Bases: _Builder Builder for the install section of a systemd service file. Source code in systemd_py/builders/install.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 class InstallBuilder ( _Builder ): \"\"\" Builder for the `install` section of a systemd service file. \"\"\" __slots__ = ( '_wanted_by' , '_required_by' , '_alias' , '_also' , '_default_instance' , ) @property def allowed_none_fields ( self ) -> List [ str ]: \"\"\" Returns a list of fields that are allowed to be None :return: List of fields that are allowed to be None :rtype: List[str] \"\"\" return [ '_wanted_by' , '_required_by' , '_alias' , '_also' , '_default_instance' ] def build ( self ) -> Install : \"\"\" Builds the `install` section of a systemd service file. :return: The `install` section of a systemd service file :rtype: Install \"\"\" self . _check () return Install ( wanted_by = self . _wanted_by , required_by = self . _required_by , alias = self . _alias , also = self . _also , default_instance = self . _default_instance ) def __init__ ( self ): self . _wanted_by : Optional [ List [ str ]] = None self . _required_by : Optional [ List [ str ]] = None self . _alias : Optional [ List [ str ]] = None self . _also : Optional [ List [ str ]] = None self . _default_instance : Optional [ str ] = None def with_wanted_by ( self , wanted_by : Union [ str , List [ str ]]) -> 'InstallBuilder' : \"\"\" Sets the `wanted_by` field of the `install` section of a systemd service file. :param wanted_by: The `wanted_by` field of the `install` section of a systemd service file :type wanted_by: List[str] :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _wanted_by = wanted_by return self def with_required_by ( self , required_by : Union [ str , List [ str ]]) -> 'InstallBuilder' : \"\"\" Sets the `required_by` field of the `install` section of a systemd service file. :param required_by: The `required_by` field of the `install` section of a systemd service file :type required_by: List[str] :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _required_by = required_by return self def with_alias ( self , alias : Union [ str , List [ str ]]) -> 'InstallBuilder' : \"\"\" Sets the `alias` field of the `install` section of a systemd service file. :param alias: The `alias` field of the `install` section of a systemd service file :type alias: List[str] :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _alias = alias return self def with_also ( self , also : Union [ str , List [ str ]]) -> 'InstallBuilder' : \"\"\" Sets the `also` field of the `install` section of a systemd service file. :param also: The `also` field of the `install` section of a systemd service file :type also: List[str] :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _also = also return self def with_default_instance ( self , default_instance : str ) -> 'InstallBuilder' : \"\"\" Sets the `default_instance` field of the `install` section of a systemd service file. :param default_instance: The `default_instance` field of the `install` section of a systemd service file :type default_instance: str :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _default_instance = default_instance return self allowed_none_fields : List [ str ] property Returns a list of fields that are allowed to be None Returns: Type Description List[str] List of fields that are allowed to be None build () Builds the install section of a systemd service file. Returns: Type Description Install The install section of a systemd service file Source code in systemd_py/builders/install.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def build ( self ) -> Install : \"\"\" Builds the `install` section of a systemd service file. :return: The `install` section of a systemd service file :rtype: Install \"\"\" self . _check () return Install ( wanted_by = self . _wanted_by , required_by = self . _required_by , alias = self . _alias , also = self . _also , default_instance = self . _default_instance ) with_alias ( alias ) Sets the alias field of the install section of a systemd service file. Parameters: Name Type Description Default alias Union [ str , List [ str ]] The alias field of the install section of a systemd service file required Returns: Type Description InstallBuilder The InstallBuilder object Source code in systemd_py/builders/install.py 93 94 95 96 97 98 99 100 101 102 103 104 105 def with_alias ( self , alias : Union [ str , List [ str ]]) -> 'InstallBuilder' : \"\"\" Sets the `alias` field of the `install` section of a systemd service file. :param alias: The `alias` field of the `install` section of a systemd service file :type alias: List[str] :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _alias = alias return self with_also ( also ) Sets the also field of the install section of a systemd service file. Parameters: Name Type Description Default also Union [ str , List [ str ]] The also field of the install section of a systemd service file required Returns: Type Description InstallBuilder The InstallBuilder object Source code in systemd_py/builders/install.py 107 108 109 110 111 112 113 114 115 116 117 118 119 def with_also ( self , also : Union [ str , List [ str ]]) -> 'InstallBuilder' : \"\"\" Sets the `also` field of the `install` section of a systemd service file. :param also: The `also` field of the `install` section of a systemd service file :type also: List[str] :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _also = also return self with_default_instance ( default_instance ) Sets the default_instance field of the install section of a systemd service file. Parameters: Name Type Description Default default_instance str The default_instance field of the install section of a systemd service file required Returns: Type Description InstallBuilder The InstallBuilder object Source code in systemd_py/builders/install.py 121 122 123 124 125 126 127 128 129 130 131 132 133 def with_default_instance ( self , default_instance : str ) -> 'InstallBuilder' : \"\"\" Sets the `default_instance` field of the `install` section of a systemd service file. :param default_instance: The `default_instance` field of the `install` section of a systemd service file :type default_instance: str :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _default_instance = default_instance return self with_required_by ( required_by ) Sets the required_by field of the install section of a systemd service file. Parameters: Name Type Description Default required_by Union [ str , List [ str ]] The required_by field of the install section of a systemd service file required Returns: Type Description InstallBuilder The InstallBuilder object Source code in systemd_py/builders/install.py 79 80 81 82 83 84 85 86 87 88 89 90 91 def with_required_by ( self , required_by : Union [ str , List [ str ]]) -> 'InstallBuilder' : \"\"\" Sets the `required_by` field of the `install` section of a systemd service file. :param required_by: The `required_by` field of the `install` section of a systemd service file :type required_by: List[str] :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _required_by = required_by return self with_wanted_by ( wanted_by ) Sets the wanted_by field of the install section of a systemd service file. Parameters: Name Type Description Default wanted_by Union [ str , List [ str ]] The wanted_by field of the install section of a systemd service file required Returns: Type Description InstallBuilder The InstallBuilder object Source code in systemd_py/builders/install.py 65 66 67 68 69 70 71 72 73 74 75 76 77 def with_wanted_by ( self , wanted_by : Union [ str , List [ str ]]) -> 'InstallBuilder' : \"\"\" Sets the `wanted_by` field of the `install` section of a systemd service file. :param wanted_by: The `wanted_by` field of the `install` section of a systemd service file :type wanted_by: List[str] :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _wanted_by = wanted_by return self","title":"install"},{"location":"reference/builders/install/#systemd_py.builders.install--install-builder","text":"Builder for the install section of a systemd service file.","title":"Install Builder \ud83c\udfd7\ufe0f"},{"location":"reference/builders/install/#systemd_py.builders.install.InstallBuilder","text":"Bases: _Builder Builder for the install section of a systemd service file. Source code in systemd_py/builders/install.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 class InstallBuilder ( _Builder ): \"\"\" Builder for the `install` section of a systemd service file. \"\"\" __slots__ = ( '_wanted_by' , '_required_by' , '_alias' , '_also' , '_default_instance' , ) @property def allowed_none_fields ( self ) -> List [ str ]: \"\"\" Returns a list of fields that are allowed to be None :return: List of fields that are allowed to be None :rtype: List[str] \"\"\" return [ '_wanted_by' , '_required_by' , '_alias' , '_also' , '_default_instance' ] def build ( self ) -> Install : \"\"\" Builds the `install` section of a systemd service file. :return: The `install` section of a systemd service file :rtype: Install \"\"\" self . _check () return Install ( wanted_by = self . _wanted_by , required_by = self . _required_by , alias = self . _alias , also = self . _also , default_instance = self . _default_instance ) def __init__ ( self ): self . _wanted_by : Optional [ List [ str ]] = None self . _required_by : Optional [ List [ str ]] = None self . _alias : Optional [ List [ str ]] = None self . _also : Optional [ List [ str ]] = None self . _default_instance : Optional [ str ] = None def with_wanted_by ( self , wanted_by : Union [ str , List [ str ]]) -> 'InstallBuilder' : \"\"\" Sets the `wanted_by` field of the `install` section of a systemd service file. :param wanted_by: The `wanted_by` field of the `install` section of a systemd service file :type wanted_by: List[str] :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _wanted_by = wanted_by return self def with_required_by ( self , required_by : Union [ str , List [ str ]]) -> 'InstallBuilder' : \"\"\" Sets the `required_by` field of the `install` section of a systemd service file. :param required_by: The `required_by` field of the `install` section of a systemd service file :type required_by: List[str] :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _required_by = required_by return self def with_alias ( self , alias : Union [ str , List [ str ]]) -> 'InstallBuilder' : \"\"\" Sets the `alias` field of the `install` section of a systemd service file. :param alias: The `alias` field of the `install` section of a systemd service file :type alias: List[str] :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _alias = alias return self def with_also ( self , also : Union [ str , List [ str ]]) -> 'InstallBuilder' : \"\"\" Sets the `also` field of the `install` section of a systemd service file. :param also: The `also` field of the `install` section of a systemd service file :type also: List[str] :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _also = also return self def with_default_instance ( self , default_instance : str ) -> 'InstallBuilder' : \"\"\" Sets the `default_instance` field of the `install` section of a systemd service file. :param default_instance: The `default_instance` field of the `install` section of a systemd service file :type default_instance: str :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _default_instance = default_instance return self","title":"InstallBuilder"},{"location":"reference/builders/install/#systemd_py.builders.install.InstallBuilder.allowed_none_fields","text":"Returns a list of fields that are allowed to be None Returns: Type Description List[str] List of fields that are allowed to be None","title":"allowed_none_fields"},{"location":"reference/builders/install/#systemd_py.builders.install.InstallBuilder.build","text":"Builds the install section of a systemd service file. Returns: Type Description Install The install section of a systemd service file Source code in systemd_py/builders/install.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def build ( self ) -> Install : \"\"\" Builds the `install` section of a systemd service file. :return: The `install` section of a systemd service file :rtype: Install \"\"\" self . _check () return Install ( wanted_by = self . _wanted_by , required_by = self . _required_by , alias = self . _alias , also = self . _also , default_instance = self . _default_instance )","title":"build()"},{"location":"reference/builders/install/#systemd_py.builders.install.InstallBuilder.with_alias","text":"Sets the alias field of the install section of a systemd service file. Parameters: Name Type Description Default alias Union [ str , List [ str ]] The alias field of the install section of a systemd service file required Returns: Type Description InstallBuilder The InstallBuilder object Source code in systemd_py/builders/install.py 93 94 95 96 97 98 99 100 101 102 103 104 105 def with_alias ( self , alias : Union [ str , List [ str ]]) -> 'InstallBuilder' : \"\"\" Sets the `alias` field of the `install` section of a systemd service file. :param alias: The `alias` field of the `install` section of a systemd service file :type alias: List[str] :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _alias = alias return self","title":"with_alias()"},{"location":"reference/builders/install/#systemd_py.builders.install.InstallBuilder.with_also","text":"Sets the also field of the install section of a systemd service file. Parameters: Name Type Description Default also Union [ str , List [ str ]] The also field of the install section of a systemd service file required Returns: Type Description InstallBuilder The InstallBuilder object Source code in systemd_py/builders/install.py 107 108 109 110 111 112 113 114 115 116 117 118 119 def with_also ( self , also : Union [ str , List [ str ]]) -> 'InstallBuilder' : \"\"\" Sets the `also` field of the `install` section of a systemd service file. :param also: The `also` field of the `install` section of a systemd service file :type also: List[str] :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _also = also return self","title":"with_also()"},{"location":"reference/builders/install/#systemd_py.builders.install.InstallBuilder.with_default_instance","text":"Sets the default_instance field of the install section of a systemd service file. Parameters: Name Type Description Default default_instance str The default_instance field of the install section of a systemd service file required Returns: Type Description InstallBuilder The InstallBuilder object Source code in systemd_py/builders/install.py 121 122 123 124 125 126 127 128 129 130 131 132 133 def with_default_instance ( self , default_instance : str ) -> 'InstallBuilder' : \"\"\" Sets the `default_instance` field of the `install` section of a systemd service file. :param default_instance: The `default_instance` field of the `install` section of a systemd service file :type default_instance: str :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _default_instance = default_instance return self","title":"with_default_instance()"},{"location":"reference/builders/install/#systemd_py.builders.install.InstallBuilder.with_required_by","text":"Sets the required_by field of the install section of a systemd service file. Parameters: Name Type Description Default required_by Union [ str , List [ str ]] The required_by field of the install section of a systemd service file required Returns: Type Description InstallBuilder The InstallBuilder object Source code in systemd_py/builders/install.py 79 80 81 82 83 84 85 86 87 88 89 90 91 def with_required_by ( self , required_by : Union [ str , List [ str ]]) -> 'InstallBuilder' : \"\"\" Sets the `required_by` field of the `install` section of a systemd service file. :param required_by: The `required_by` field of the `install` section of a systemd service file :type required_by: List[str] :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _required_by = required_by return self","title":"with_required_by()"},{"location":"reference/builders/install/#systemd_py.builders.install.InstallBuilder.with_wanted_by","text":"Sets the wanted_by field of the install section of a systemd service file. Parameters: Name Type Description Default wanted_by Union [ str , List [ str ]] The wanted_by field of the install section of a systemd service file required Returns: Type Description InstallBuilder The InstallBuilder object Source code in systemd_py/builders/install.py 65 66 67 68 69 70 71 72 73 74 75 76 77 def with_wanted_by ( self , wanted_by : Union [ str , List [ str ]]) -> 'InstallBuilder' : \"\"\" Sets the `wanted_by` field of the `install` section of a systemd service file. :param wanted_by: The `wanted_by` field of the `install` section of a systemd service file :type wanted_by: List[str] :return: The `InstallBuilder` object :rtype: InstallBuilder \"\"\" self . _wanted_by = wanted_by return self","title":"with_wanted_by()"},{"location":"reference/builders/service/","text":"Service Builder \ud83c\udfd7\ufe0f Builder for the service section of a systemd service file. ServiceBuilder Bases: _Builder Builder for the service section of a systemd service file. Source code in systemd_py/builders/service.pyclass ServiceBuilder ( _Builder ): \"\"\" Builder for the `service` section of a systemd service file. \"\"\" __slots__ = ( '_type' , '_remain_after_exit' , '_pid_file' , '_bus_name' , '_notify_access' , '_exec_start' , '_exec_start_pre' , '_exec_start_post' , '_exec_reload' , '_exec_stop' , '_exec_stop_post' , '_restart_sec' , '_restart' , '_timeout_sec' , '_user' , '_group' , '_nice' ) @property def allowed_none_fields ( self ) -> List [ str ]: \"\"\" Returns a list of fields that are allowed to be None :return: List of fields that are allowed to be None :rtype: List[str] \"\"\" return [ \"_type\" , \"_remain_after_exit\" , \"_pid_file\" , \"_bus_name\" , \"_notify_access\" , \"_exec_start\" , \"_exec_start_pre\" , \"_exec_start_post\" , \"_exec_reload\" , \"_exec_stop\" , \"_exec_stop_post\" , \"_restart_sec\" , \"_restart\" , \"_timeout_sec\" , \"_user\" , \"_group\" , \"_nice\" ] def __init__ ( self ): self . _type : Optional [ TypeType ] = None self . _remain_after_exit : Optional [ bool ] = None self . _pid_file : Optional [ str ] = None self . _bus_name : Optional [ str ] = None self . _notify_access : Optional [ str ] = None self . _exec_start : Optional [ List [ str ]] = None self . _exec_start_pre : Optional [ List [ str ]] = None self . _exec_start_post : Optional [ List [ str ]] = None self . _exec_reload : Optional [ List [ str ]] = None self . _exec_stop : Optional [ List [ str ]] = None self . _exec_stop_post : Optional [ List [ str ]] = None self . _restart_sec : Optional [ int ] = None self . _restart : Optional [ RestartType ] = None self . _timeout_sec : Optional [ int ] = None self . _user : Optional [ str ] = None self . _group : Optional [ str ] = None self . _nice : Optional [ int ] = None def build ( self ) -> Service : \"\"\" Builds the `service` section of a systemd service file. :return: The `service` section of a systemd service file :rtype: Service \"\"\" self . _check () return Service ( type = self . _type , remain_after_exit = self . _remain_after_exit , pid_file = self . _pid_file , bus_name = self . _bus_name , notify_access = self . _notify_access , exec_start = self . _exec_start , exec_start_pre = self . _exec_start_pre , exec_start_post = self . _exec_start_post , exec_reload = self . _exec_reload , exec_stop = self . _exec_stop , exec_stop_post = self . _exec_stop_post , restart_sec = self . _restart_sec , restart = self . _restart , timeout_sec = self . _timeout_sec , user = self . _user , group = self . _group , nice = self . _nice ) def with_type ( self , type : TypeType ) -> 'ServiceBuilder' : \"\"\" Sets the `type` field of the `service` section of a systemd service file. :param type: The `type` field of the `service` section of a systemd service file :type type: TypeType :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _type = type return self def with_remain_after_exit ( self , remain_after_exit : bool ) -> 'ServiceBuilder' : \"\"\" Sets the `remain_after_exit` field of the `service` section of a systemd service file. :param remain_after_exit: The `remain_after_exit` field of the `service` section of a systemd service file :type remain_after_exit: bool :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _remain_after_exit = remain_after_exit return self def with_pid_file ( self , pid_file : str ) -> 'ServiceBuilder' : \"\"\" Sets the `pid_file` field of the `service` section of a systemd service file. :param pid_file: The `pid_file` field of the `service` section of a systemd service file :type pid_file: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _pid_file = pid_file return self def with_bus_name ( self , bus_name : str ) -> 'ServiceBuilder' : \"\"\" Sets the `bus_name` field of the `service` section of a systemd service file. :param bus_name: The `bus_name` field of the `service` section of a systemd service file :type bus_name: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _bus_name = bus_name return self def with_notify_access ( self , notify_access : str ) -> 'ServiceBuilder' : \"\"\" Sets the `notify_access` field of the `service` section of a systemd service file. :param notify_access: The `notify_access` field of the `service` section of a systemd service file :type notify_access: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _notify_access = notify_access return self def with_exec_start ( self , exec_start : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_start` field of the `service` section of a systemd service file. :param exec_start: The `exec_start` field of the `service` section of a systemd service file :type exec_start: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_start = exec_start return self def with_exec_start_pre ( self , exec_start_pre : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_start_pre` field of the `service` section of a systemd service file. :param exec_start_pre: The `exec_start_pre` field of the `service` section of a systemd service file :type exec_start_pre: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_start_pre = exec_start_pre return self def with_exec_start_post ( self , exec_start_post : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_start_post` field of the `service` section of a systemd service file. :param exec_start_post: The `exec_start_post` field of the `service` section of a systemd service file :type exec_start_post: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_start_post = exec_start_post return self def with_exec_reload ( self , exec_reload : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_reload` field of the `service` section of a systemd service file. :param exec_reload: The `exec_reload` field of the `service` section of a systemd service file :type exec_reload: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_reload = exec_reload return self def with_exec_stop ( self , exec_stop : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_stop` field of the `service` section of a systemd service file. :param exec_stop: The `exec_stop` field of the `service` section of a systemd service file :type exec_stop: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_stop = exec_stop return self def with_exec_stop_post ( self , exec_stop_post : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_stop_post` field of the `service` section of a systemd service file. :param exec_stop_post: The `exec_stop_post` field of the `service` section of a systemd service file :type exec_stop_post: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_stop_post = exec_stop_post return self def with_restart_sec ( self , restart_sec : int ) -> 'ServiceBuilder' : \"\"\" Sets the `restart_sec` field of the `service` section of a systemd service file. :param restart_sec: The `restart_sec` field of the `service` section of a systemd service file :type restart_sec: int :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _restart_sec = restart_sec return self def with_restart ( self , restart : RestartType ) -> 'ServiceBuilder' : \"\"\" Sets the `restart` field of the `service` section of a systemd service file. :param restart: The `restart` field of the `service` section of a systemd service file :type restart: RestartType :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _restart = restart return self def with_timeout_sec ( self , timeout_sec : int ) -> 'ServiceBuilder' : \"\"\" Sets the `timeout_sec` field of the `service` section of a systemd service file. :param timeout_sec: The `timeout_sec` field of the `service` section of a systemd service file :type timeout_sec: int :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _timeout_sec = timeout_sec return self def with_user ( self , user : str ) -> 'ServiceBuilder' : \"\"\" Sets the `user` field of the `service` section of a systemd service file. :param user: The `user` field of the `service` section of a systemd service file :type user: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _user = user return self def with_group ( self , group : str ) -> 'ServiceBuilder' : \"\"\" Sets the `group` field of the `service` section of a systemd service file. :param group: The `group` field of the `service` section of a systemd service file :type group: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _group = group return self def with_nice ( self , nice : int ) -> 'ServiceBuilder' : \"\"\" Sets the `nice` field of the `service` section of a systemd service file. :param nice: The `nice` field of the `service` section of a systemd service file :type nice: int :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _nice = nice return self allowed_none_fields : List [ str ] property Returns a list of fields that are allowed to be None Returns: Type Description List[str] List of fields that are allowed to be None build () Builds the service section of a systemd service file. Returns: Type Description Service The service section of a systemd service file Source code in systemd_py/builders/service.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 def build ( self ) -> Service : \"\"\" Builds the `service` section of a systemd service file. :return: The `service` section of a systemd service file :rtype: Service \"\"\" self . _check () return Service ( type = self . _type , remain_after_exit = self . _remain_after_exit , pid_file = self . _pid_file , bus_name = self . _bus_name , notify_access = self . _notify_access , exec_start = self . _exec_start , exec_start_pre = self . _exec_start_pre , exec_start_post = self . _exec_start_post , exec_reload = self . _exec_reload , exec_stop = self . _exec_stop , exec_stop_post = self . _exec_stop_post , restart_sec = self . _restart_sec , restart = self . _restart , timeout_sec = self . _timeout_sec , user = self . _user , group = self . _group , nice = self . _nice ) with_bus_name ( bus_name ) Sets the bus_name field of the service section of a systemd service file. Parameters: Name Type Description Default bus_name str The bus_name field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 147 148 149 150 151 152 153 154 155 156 157 158 159 def with_bus_name ( self , bus_name : str ) -> 'ServiceBuilder' : \"\"\" Sets the `bus_name` field of the `service` section of a systemd service file. :param bus_name: The `bus_name` field of the `service` section of a systemd service file :type bus_name: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _bus_name = bus_name return self with_exec_reload ( exec_reload ) Sets the exec_reload field of the service section of a systemd service file. Parameters: Name Type Description Default exec_reload List [ str ] The exec_reload field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 217 218 219 220 221 222 223 224 225 226 227 228 229 def with_exec_reload ( self , exec_reload : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_reload` field of the `service` section of a systemd service file. :param exec_reload: The `exec_reload` field of the `service` section of a systemd service file :type exec_reload: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_reload = exec_reload return self with_exec_start ( exec_start ) Sets the exec_start field of the service section of a systemd service file. Parameters: Name Type Description Default exec_start List [ str ] The exec_start field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 175 176 177 178 179 180 181 182 183 184 185 186 187 def with_exec_start ( self , exec_start : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_start` field of the `service` section of a systemd service file. :param exec_start: The `exec_start` field of the `service` section of a systemd service file :type exec_start: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_start = exec_start return self with_exec_start_post ( exec_start_post ) Sets the exec_start_post field of the service section of a systemd service file. Parameters: Name Type Description Default exec_start_post List [ str ] The exec_start_post field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 203 204 205 206 207 208 209 210 211 212 213 214 215 def with_exec_start_post ( self , exec_start_post : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_start_post` field of the `service` section of a systemd service file. :param exec_start_post: The `exec_start_post` field of the `service` section of a systemd service file :type exec_start_post: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_start_post = exec_start_post return self with_exec_start_pre ( exec_start_pre ) Sets the exec_start_pre field of the service section of a systemd service file. Parameters: Name Type Description Default exec_start_pre List [ str ] The exec_start_pre field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 189 190 191 192 193 194 195 196 197 198 199 200 201 def with_exec_start_pre ( self , exec_start_pre : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_start_pre` field of the `service` section of a systemd service file. :param exec_start_pre: The `exec_start_pre` field of the `service` section of a systemd service file :type exec_start_pre: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_start_pre = exec_start_pre return self with_exec_stop ( exec_stop ) Sets the exec_stop field of the service section of a systemd service file. Parameters: Name Type Description Default exec_stop List [ str ] The exec_stop field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 231 232 233 234 235 236 237 238 239 240 241 242 243 def with_exec_stop ( self , exec_stop : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_stop` field of the `service` section of a systemd service file. :param exec_stop: The `exec_stop` field of the `service` section of a systemd service file :type exec_stop: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_stop = exec_stop return self with_exec_stop_post ( exec_stop_post ) Sets the exec_stop_post field of the service section of a systemd service file. Parameters: Name Type Description Default exec_stop_post List [ str ] The exec_stop_post field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 245 246 247 248 249 250 251 252 253 254 255 256 257 def with_exec_stop_post ( self , exec_stop_post : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_stop_post` field of the `service` section of a systemd service file. :param exec_stop_post: The `exec_stop_post` field of the `service` section of a systemd service file :type exec_stop_post: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_stop_post = exec_stop_post return self with_group ( group ) Sets the group field of the service section of a systemd service file. Parameters: Name Type Description Default group str The group field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 315 316 317 318 319 320 321 322 323 324 325 326 327 def with_group ( self , group : str ) -> 'ServiceBuilder' : \"\"\" Sets the `group` field of the `service` section of a systemd service file. :param group: The `group` field of the `service` section of a systemd service file :type group: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _group = group return self with_nice ( nice ) Sets the nice field of the service section of a systemd service file. Parameters: Name Type Description Default nice int The nice field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 329 330 331 332 333 334 335 336 337 338 339 340 341 def with_nice ( self , nice : int ) -> 'ServiceBuilder' : \"\"\" Sets the `nice` field of the `service` section of a systemd service file. :param nice: The `nice` field of the `service` section of a systemd service file :type nice: int :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _nice = nice return self with_notify_access ( notify_access ) Sets the notify_access field of the service section of a systemd service file. Parameters: Name Type Description Default notify_access str The notify_access field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 161 162 163 164 165 166 167 168 169 170 171 172 173 def with_notify_access ( self , notify_access : str ) -> 'ServiceBuilder' : \"\"\" Sets the `notify_access` field of the `service` section of a systemd service file. :param notify_access: The `notify_access` field of the `service` section of a systemd service file :type notify_access: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _notify_access = notify_access return self with_pid_file ( pid_file ) Sets the pid_file field of the service section of a systemd service file. Parameters: Name Type Description Default pid_file str The pid_file field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 133 134 135 136 137 138 139 140 141 142 143 144 145 def with_pid_file ( self , pid_file : str ) -> 'ServiceBuilder' : \"\"\" Sets the `pid_file` field of the `service` section of a systemd service file. :param pid_file: The `pid_file` field of the `service` section of a systemd service file :type pid_file: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _pid_file = pid_file return self with_remain_after_exit ( remain_after_exit ) Sets the remain_after_exit field of the service section of a systemd service file. Parameters: Name Type Description Default remain_after_exit bool The remain_after_exit field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 119 120 121 122 123 124 125 126 127 128 129 130 131 def with_remain_after_exit ( self , remain_after_exit : bool ) -> 'ServiceBuilder' : \"\"\" Sets the `remain_after_exit` field of the `service` section of a systemd service file. :param remain_after_exit: The `remain_after_exit` field of the `service` section of a systemd service file :type remain_after_exit: bool :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _remain_after_exit = remain_after_exit return self with_restart ( restart ) Sets the restart field of the service section of a systemd service file. Parameters: Name Type Description Default restart RestartType The restart field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 273 274 275 276 277 278 279 280 281 282 283 284 285 def with_restart ( self , restart : RestartType ) -> 'ServiceBuilder' : \"\"\" Sets the `restart` field of the `service` section of a systemd service file. :param restart: The `restart` field of the `service` section of a systemd service file :type restart: RestartType :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _restart = restart return self with_restart_sec ( restart_sec ) Sets the restart_sec field of the service section of a systemd service file. Parameters: Name Type Description Default restart_sec int The restart_sec field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 259 260 261 262 263 264 265 266 267 268 269 270 271 def with_restart_sec ( self , restart_sec : int ) -> 'ServiceBuilder' : \"\"\" Sets the `restart_sec` field of the `service` section of a systemd service file. :param restart_sec: The `restart_sec` field of the `service` section of a systemd service file :type restart_sec: int :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _restart_sec = restart_sec return self with_timeout_sec ( timeout_sec ) Sets the timeout_sec field of the service section of a systemd service file. Parameters: Name Type Description Default timeout_sec int The timeout_sec field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 287 288 289 290 291 292 293 294 295 296 297 298 299 def with_timeout_sec ( self , timeout_sec : int ) -> 'ServiceBuilder' : \"\"\" Sets the `timeout_sec` field of the `service` section of a systemd service file. :param timeout_sec: The `timeout_sec` field of the `service` section of a systemd service file :type timeout_sec: int :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _timeout_sec = timeout_sec return self with_type ( type ) Sets the type field of the service section of a systemd service file. Parameters: Name Type Description Default type TypeType The type field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 105 106 107 108 109 110 111 112 113 114 115 116 117 def with_type ( self , type : TypeType ) -> 'ServiceBuilder' : \"\"\" Sets the `type` field of the `service` section of a systemd service file. :param type: The `type` field of the `service` section of a systemd service file :type type: TypeType :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _type = type return self with_user ( user ) Sets the user field of the service section of a systemd service file. Parameters: Name Type Description Default user str The user field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 301 302 303 304 305 306 307 308 309 310 311 312 313 def with_user ( self , user : str ) -> 'ServiceBuilder' : \"\"\" Sets the `user` field of the `service` section of a systemd service file. :param user: The `user` field of the `service` section of a systemd service file :type user: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _user = user return self","title":"service"},{"location":"reference/builders/service/#systemd_py.builders.service--service-builder","text":"Builder for the service section of a systemd service file.","title":"Service Builder \ud83c\udfd7\ufe0f"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder","text":"Bases: _Builder Builder for the service section of a systemd service file. Source code in systemd_py/builders/service.pyclass ServiceBuilder ( _Builder ): \"\"\" Builder for the `service` section of a systemd service file. \"\"\" __slots__ = ( '_type' , '_remain_after_exit' , '_pid_file' , '_bus_name' , '_notify_access' , '_exec_start' , '_exec_start_pre' , '_exec_start_post' , '_exec_reload' , '_exec_stop' , '_exec_stop_post' , '_restart_sec' , '_restart' , '_timeout_sec' , '_user' , '_group' , '_nice' ) @property def allowed_none_fields ( self ) -> List [ str ]: \"\"\" Returns a list of fields that are allowed to be None :return: List of fields that are allowed to be None :rtype: List[str] \"\"\" return [ \"_type\" , \"_remain_after_exit\" , \"_pid_file\" , \"_bus_name\" , \"_notify_access\" , \"_exec_start\" , \"_exec_start_pre\" , \"_exec_start_post\" , \"_exec_reload\" , \"_exec_stop\" , \"_exec_stop_post\" , \"_restart_sec\" , \"_restart\" , \"_timeout_sec\" , \"_user\" , \"_group\" , \"_nice\" ] def __init__ ( self ): self . _type : Optional [ TypeType ] = None self . _remain_after_exit : Optional [ bool ] = None self . _pid_file : Optional [ str ] = None self . _bus_name : Optional [ str ] = None self . _notify_access : Optional [ str ] = None self . _exec_start : Optional [ List [ str ]] = None self . _exec_start_pre : Optional [ List [ str ]] = None self . _exec_start_post : Optional [ List [ str ]] = None self . _exec_reload : Optional [ List [ str ]] = None self . _exec_stop : Optional [ List [ str ]] = None self . _exec_stop_post : Optional [ List [ str ]] = None self . _restart_sec : Optional [ int ] = None self . _restart : Optional [ RestartType ] = None self . _timeout_sec : Optional [ int ] = None self . _user : Optional [ str ] = None self . _group : Optional [ str ] = None self . _nice : Optional [ int ] = None def build ( self ) -> Service : \"\"\" Builds the `service` section of a systemd service file. :return: The `service` section of a systemd service file :rtype: Service \"\"\" self . _check () return Service ( type = self . _type , remain_after_exit = self . _remain_after_exit , pid_file = self . _pid_file , bus_name = self . _bus_name , notify_access = self . _notify_access , exec_start = self . _exec_start , exec_start_pre = self . _exec_start_pre , exec_start_post = self . _exec_start_post , exec_reload = self . _exec_reload , exec_stop = self . _exec_stop , exec_stop_post = self . _exec_stop_post , restart_sec = self . _restart_sec , restart = self . _restart , timeout_sec = self . _timeout_sec , user = self . _user , group = self . _group , nice = self . _nice ) def with_type ( self , type : TypeType ) -> 'ServiceBuilder' : \"\"\" Sets the `type` field of the `service` section of a systemd service file. :param type: The `type` field of the `service` section of a systemd service file :type type: TypeType :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _type = type return self def with_remain_after_exit ( self , remain_after_exit : bool ) -> 'ServiceBuilder' : \"\"\" Sets the `remain_after_exit` field of the `service` section of a systemd service file. :param remain_after_exit: The `remain_after_exit` field of the `service` section of a systemd service file :type remain_after_exit: bool :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _remain_after_exit = remain_after_exit return self def with_pid_file ( self , pid_file : str ) -> 'ServiceBuilder' : \"\"\" Sets the `pid_file` field of the `service` section of a systemd service file. :param pid_file: The `pid_file` field of the `service` section of a systemd service file :type pid_file: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _pid_file = pid_file return self def with_bus_name ( self , bus_name : str ) -> 'ServiceBuilder' : \"\"\" Sets the `bus_name` field of the `service` section of a systemd service file. :param bus_name: The `bus_name` field of the `service` section of a systemd service file :type bus_name: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _bus_name = bus_name return self def with_notify_access ( self , notify_access : str ) -> 'ServiceBuilder' : \"\"\" Sets the `notify_access` field of the `service` section of a systemd service file. :param notify_access: The `notify_access` field of the `service` section of a systemd service file :type notify_access: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _notify_access = notify_access return self def with_exec_start ( self , exec_start : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_start` field of the `service` section of a systemd service file. :param exec_start: The `exec_start` field of the `service` section of a systemd service file :type exec_start: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_start = exec_start return self def with_exec_start_pre ( self , exec_start_pre : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_start_pre` field of the `service` section of a systemd service file. :param exec_start_pre: The `exec_start_pre` field of the `service` section of a systemd service file :type exec_start_pre: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_start_pre = exec_start_pre return self def with_exec_start_post ( self , exec_start_post : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_start_post` field of the `service` section of a systemd service file. :param exec_start_post: The `exec_start_post` field of the `service` section of a systemd service file :type exec_start_post: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_start_post = exec_start_post return self def with_exec_reload ( self , exec_reload : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_reload` field of the `service` section of a systemd service file. :param exec_reload: The `exec_reload` field of the `service` section of a systemd service file :type exec_reload: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_reload = exec_reload return self def with_exec_stop ( self , exec_stop : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_stop` field of the `service` section of a systemd service file. :param exec_stop: The `exec_stop` field of the `service` section of a systemd service file :type exec_stop: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_stop = exec_stop return self def with_exec_stop_post ( self , exec_stop_post : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_stop_post` field of the `service` section of a systemd service file. :param exec_stop_post: The `exec_stop_post` field of the `service` section of a systemd service file :type exec_stop_post: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_stop_post = exec_stop_post return self def with_restart_sec ( self , restart_sec : int ) -> 'ServiceBuilder' : \"\"\" Sets the `restart_sec` field of the `service` section of a systemd service file. :param restart_sec: The `restart_sec` field of the `service` section of a systemd service file :type restart_sec: int :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _restart_sec = restart_sec return self def with_restart ( self , restart : RestartType ) -> 'ServiceBuilder' : \"\"\" Sets the `restart` field of the `service` section of a systemd service file. :param restart: The `restart` field of the `service` section of a systemd service file :type restart: RestartType :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _restart = restart return self def with_timeout_sec ( self , timeout_sec : int ) -> 'ServiceBuilder' : \"\"\" Sets the `timeout_sec` field of the `service` section of a systemd service file. :param timeout_sec: The `timeout_sec` field of the `service` section of a systemd service file :type timeout_sec: int :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _timeout_sec = timeout_sec return self def with_user ( self , user : str ) -> 'ServiceBuilder' : \"\"\" Sets the `user` field of the `service` section of a systemd service file. :param user: The `user` field of the `service` section of a systemd service file :type user: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _user = user return self def with_group ( self , group : str ) -> 'ServiceBuilder' : \"\"\" Sets the `group` field of the `service` section of a systemd service file. :param group: The `group` field of the `service` section of a systemd service file :type group: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _group = group return self def with_nice ( self , nice : int ) -> 'ServiceBuilder' : \"\"\" Sets the `nice` field of the `service` section of a systemd service file. :param nice: The `nice` field of the `service` section of a systemd service file :type nice: int :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _nice = nice return self","title":"ServiceBuilder"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.allowed_none_fields","text":"Returns a list of fields that are allowed to be None Returns: Type Description List[str] List of fields that are allowed to be None","title":"allowed_none_fields"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.build","text":"Builds the service section of a systemd service file. Returns: Type Description Service The service section of a systemd service file Source code in systemd_py/builders/service.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 def build ( self ) -> Service : \"\"\" Builds the `service` section of a systemd service file. :return: The `service` section of a systemd service file :rtype: Service \"\"\" self . _check () return Service ( type = self . _type , remain_after_exit = self . _remain_after_exit , pid_file = self . _pid_file , bus_name = self . _bus_name , notify_access = self . _notify_access , exec_start = self . _exec_start , exec_start_pre = self . _exec_start_pre , exec_start_post = self . _exec_start_post , exec_reload = self . _exec_reload , exec_stop = self . _exec_stop , exec_stop_post = self . _exec_stop_post , restart_sec = self . _restart_sec , restart = self . _restart , timeout_sec = self . _timeout_sec , user = self . _user , group = self . _group , nice = self . _nice )","title":"build()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_bus_name","text":"Sets the bus_name field of the service section of a systemd service file. Parameters: Name Type Description Default bus_name str The bus_name field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 147 148 149 150 151 152 153 154 155 156 157 158 159 def with_bus_name ( self , bus_name : str ) -> 'ServiceBuilder' : \"\"\" Sets the `bus_name` field of the `service` section of a systemd service file. :param bus_name: The `bus_name` field of the `service` section of a systemd service file :type bus_name: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _bus_name = bus_name return self","title":"with_bus_name()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_exec_reload","text":"Sets the exec_reload field of the service section of a systemd service file. Parameters: Name Type Description Default exec_reload List [ str ] The exec_reload field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 217 218 219 220 221 222 223 224 225 226 227 228 229 def with_exec_reload ( self , exec_reload : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_reload` field of the `service` section of a systemd service file. :param exec_reload: The `exec_reload` field of the `service` section of a systemd service file :type exec_reload: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_reload = exec_reload return self","title":"with_exec_reload()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_exec_start","text":"Sets the exec_start field of the service section of a systemd service file. Parameters: Name Type Description Default exec_start List [ str ] The exec_start field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 175 176 177 178 179 180 181 182 183 184 185 186 187 def with_exec_start ( self , exec_start : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_start` field of the `service` section of a systemd service file. :param exec_start: The `exec_start` field of the `service` section of a systemd service file :type exec_start: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_start = exec_start return self","title":"with_exec_start()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_exec_start_post","text":"Sets the exec_start_post field of the service section of a systemd service file. Parameters: Name Type Description Default exec_start_post List [ str ] The exec_start_post field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 203 204 205 206 207 208 209 210 211 212 213 214 215 def with_exec_start_post ( self , exec_start_post : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_start_post` field of the `service` section of a systemd service file. :param exec_start_post: The `exec_start_post` field of the `service` section of a systemd service file :type exec_start_post: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_start_post = exec_start_post return self","title":"with_exec_start_post()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_exec_start_pre","text":"Sets the exec_start_pre field of the service section of a systemd service file. Parameters: Name Type Description Default exec_start_pre List [ str ] The exec_start_pre field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 189 190 191 192 193 194 195 196 197 198 199 200 201 def with_exec_start_pre ( self , exec_start_pre : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_start_pre` field of the `service` section of a systemd service file. :param exec_start_pre: The `exec_start_pre` field of the `service` section of a systemd service file :type exec_start_pre: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_start_pre = exec_start_pre return self","title":"with_exec_start_pre()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_exec_stop","text":"Sets the exec_stop field of the service section of a systemd service file. Parameters: Name Type Description Default exec_stop List [ str ] The exec_stop field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 231 232 233 234 235 236 237 238 239 240 241 242 243 def with_exec_stop ( self , exec_stop : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_stop` field of the `service` section of a systemd service file. :param exec_stop: The `exec_stop` field of the `service` section of a systemd service file :type exec_stop: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_stop = exec_stop return self","title":"with_exec_stop()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_exec_stop_post","text":"Sets the exec_stop_post field of the service section of a systemd service file. Parameters: Name Type Description Default exec_stop_post List [ str ] The exec_stop_post field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 245 246 247 248 249 250 251 252 253 254 255 256 257 def with_exec_stop_post ( self , exec_stop_post : List [ str ]) -> 'ServiceBuilder' : \"\"\" Sets the `exec_stop_post` field of the `service` section of a systemd service file. :param exec_stop_post: The `exec_stop_post` field of the `service` section of a systemd service file :type exec_stop_post: List[str] :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _exec_stop_post = exec_stop_post return self","title":"with_exec_stop_post()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_group","text":"Sets the group field of the service section of a systemd service file. Parameters: Name Type Description Default group str The group field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 315 316 317 318 319 320 321 322 323 324 325 326 327 def with_group ( self , group : str ) -> 'ServiceBuilder' : \"\"\" Sets the `group` field of the `service` section of a systemd service file. :param group: The `group` field of the `service` section of a systemd service file :type group: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _group = group return self","title":"with_group()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_nice","text":"Sets the nice field of the service section of a systemd service file. Parameters: Name Type Description Default nice int The nice field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 329 330 331 332 333 334 335 336 337 338 339 340 341 def with_nice ( self , nice : int ) -> 'ServiceBuilder' : \"\"\" Sets the `nice` field of the `service` section of a systemd service file. :param nice: The `nice` field of the `service` section of a systemd service file :type nice: int :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _nice = nice return self","title":"with_nice()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_notify_access","text":"Sets the notify_access field of the service section of a systemd service file. Parameters: Name Type Description Default notify_access str The notify_access field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 161 162 163 164 165 166 167 168 169 170 171 172 173 def with_notify_access ( self , notify_access : str ) -> 'ServiceBuilder' : \"\"\" Sets the `notify_access` field of the `service` section of a systemd service file. :param notify_access: The `notify_access` field of the `service` section of a systemd service file :type notify_access: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _notify_access = notify_access return self","title":"with_notify_access()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_pid_file","text":"Sets the pid_file field of the service section of a systemd service file. Parameters: Name Type Description Default pid_file str The pid_file field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 133 134 135 136 137 138 139 140 141 142 143 144 145 def with_pid_file ( self , pid_file : str ) -> 'ServiceBuilder' : \"\"\" Sets the `pid_file` field of the `service` section of a systemd service file. :param pid_file: The `pid_file` field of the `service` section of a systemd service file :type pid_file: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _pid_file = pid_file return self","title":"with_pid_file()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_remain_after_exit","text":"Sets the remain_after_exit field of the service section of a systemd service file. Parameters: Name Type Description Default remain_after_exit bool The remain_after_exit field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 119 120 121 122 123 124 125 126 127 128 129 130 131 def with_remain_after_exit ( self , remain_after_exit : bool ) -> 'ServiceBuilder' : \"\"\" Sets the `remain_after_exit` field of the `service` section of a systemd service file. :param remain_after_exit: The `remain_after_exit` field of the `service` section of a systemd service file :type remain_after_exit: bool :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _remain_after_exit = remain_after_exit return self","title":"with_remain_after_exit()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_restart","text":"Sets the restart field of the service section of a systemd service file. Parameters: Name Type Description Default restart RestartType The restart field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 273 274 275 276 277 278 279 280 281 282 283 284 285 def with_restart ( self , restart : RestartType ) -> 'ServiceBuilder' : \"\"\" Sets the `restart` field of the `service` section of a systemd service file. :param restart: The `restart` field of the `service` section of a systemd service file :type restart: RestartType :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _restart = restart return self","title":"with_restart()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_restart_sec","text":"Sets the restart_sec field of the service section of a systemd service file. Parameters: Name Type Description Default restart_sec int The restart_sec field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 259 260 261 262 263 264 265 266 267 268 269 270 271 def with_restart_sec ( self , restart_sec : int ) -> 'ServiceBuilder' : \"\"\" Sets the `restart_sec` field of the `service` section of a systemd service file. :param restart_sec: The `restart_sec` field of the `service` section of a systemd service file :type restart_sec: int :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _restart_sec = restart_sec return self","title":"with_restart_sec()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_timeout_sec","text":"Sets the timeout_sec field of the service section of a systemd service file. Parameters: Name Type Description Default timeout_sec int The timeout_sec field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 287 288 289 290 291 292 293 294 295 296 297 298 299 def with_timeout_sec ( self , timeout_sec : int ) -> 'ServiceBuilder' : \"\"\" Sets the `timeout_sec` field of the `service` section of a systemd service file. :param timeout_sec: The `timeout_sec` field of the `service` section of a systemd service file :type timeout_sec: int :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _timeout_sec = timeout_sec return self","title":"with_timeout_sec()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_type","text":"Sets the type field of the service section of a systemd service file. Parameters: Name Type Description Default type TypeType The type field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 105 106 107 108 109 110 111 112 113 114 115 116 117 def with_type ( self , type : TypeType ) -> 'ServiceBuilder' : \"\"\" Sets the `type` field of the `service` section of a systemd service file. :param type: The `type` field of the `service` section of a systemd service file :type type: TypeType :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _type = type return self","title":"with_type()"},{"location":"reference/builders/service/#systemd_py.builders.service.ServiceBuilder.with_user","text":"Sets the user field of the service section of a systemd service file. Parameters: Name Type Description Default user str The user field of the service section of a systemd service file required Returns: Type Description ServiceBuilder The ServiceBuilder object Source code in systemd_py/builders/service.py 301 302 303 304 305 306 307 308 309 310 311 312 313 def with_user ( self , user : str ) -> 'ServiceBuilder' : \"\"\" Sets the `user` field of the `service` section of a systemd service file. :param user: The `user` field of the `service` section of a systemd service file :type user: str :return: The `ServiceBuilder` object :rtype: ServiceBuilder \"\"\" self . _user = user return self","title":"with_user()"},{"location":"reference/builders/socket/","text":"Socket Builder \ud83c\udfd7\ufe0f Builder for the socket section of a systemd service file. SocketBuilder Bases: _Builder Builder for the socket section of a systemd service file. Source code in systemd_py/builders/socket.pyclass SocketBuilder ( _Builder ): \"\"\" Builder for the `socket` section of a systemd service file. \"\"\" __slots__ = ( \"_listen_stream\" , \"_listen_datagram\" , \"_listen_sequential_packet\" , \"_listen_fifo\" , \"_accept\" , \"_socket_user\" , \"_socket_group\" , \"_socket_mode\" , \"_service\" , ) @property def allowed_none_fields ( self ) -> List [ str ]: \"\"\" Returns a list of fields that are allowed to be None :return: List of fields that are allowed to be None :rtype: List[str] \"\"\" return [ \"_listen_stream\" , \"_listen_datagram\" , \"_listen_sequential_packet\" , \"_listen_fifo\" , \"_accept\" , \"_socket_user\" , \"_socket_group\" , \"_socket_mode\" , \"_service\" , ] def build ( self ) -> Socket : \"\"\" Builds the `socket` section of a systemd service file. :return: The `socket` section of a systemd service file :rtype: Socket \"\"\" self . _check () return Socket ( listen_stream = self . _listen_stream , listen_datagram = self . _listen_datagram , listen_sequential_packet = self . _listen_sequential_packet , listen_fifo = self . _listen_fifo , accept = self . _accept , socket_user = self . _socket_user , socket_group = self . _socket_group , socket_mode = self . _socket_mode , service = self . _service , ) def __init__ ( self ): self . _listen_stream : Optional [ List [ str ]] = None self . _listen_datagram : Optional [ List [ str ]] = None self . _listen_sequential_packet : Optional [ List [ str ]] = None self . _listen_fifo : Optional [ List [ str ]] = None self . _accept : Optional [ bool ] = None self . _socket_user : Optional [ str ] = None self . _socket_group : Optional [ str ] = None self . _socket_mode : Optional [ str ] = None self . _service : Optional [ str ] = None def with_listen_stream ( self , listen_stream : List [ str ]) -> 'SocketBuilder' : \"\"\" Sets the `listen_stream` field of the `socket` section of a systemd service file. :param listen_stream: The `listen_stream` field of the `socket` section of a systemd service file :type listen_stream: List[str] :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _listen_stream = listen_stream return self def with_listen_datagram ( self , listen_datagram : List [ str ]) -> 'SocketBuilder' : \"\"\" Sets the `listen_datagram` field of the `socket` section of a systemd service file. :param listen_datagram: The `listen_datagram` field of the `socket` section of a systemd service file :type listen_datagram: List[str] :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _listen_datagram = listen_datagram return self def with_listen_sequential_packet ( self , listen_sequential_packet : List [ str ]) -> 'SocketBuilder' : \"\"\" Sets the `listen_sequential_packet` field of the `socket` section of a systemd service file. :param listen_sequential_packet: The `listen_sequential_packet` field of the `socket` section of a systemd service file :type listen_sequential_packet: List[str] :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _listen_sequential_packet = listen_sequential_packet return self def with_listen_fifo ( self , listen_fifo : List [ str ]) -> 'SocketBuilder' : \"\"\" Sets the `listen_fifo` field of the `socket` section of a systemd service file. :param listen_fifo: The `listen_fifo` field of the `socket` section of a systemd service file :type listen_fifo: List[str] :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _listen_fifo = listen_fifo return self def with_accept ( self , accept : bool ) -> 'SocketBuilder' : \"\"\" Sets the `accept` field of the `socket` section of a systemd service file. :param accept: The `accept` field of the `socket` section of a systemd service file :type accept: bool :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _accept = accept return self def with_socket_user ( self , socket_user : str ) -> 'SocketBuilder' : \"\"\" Sets the `socket_user` field of the `socket` section of a systemd service file. :param socket_user: The `socket_user` field of the `socket` section of a systemd service file :type socket_user: str :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _socket_user = socket_user return self def with_socket_group ( self , socket_group : str ) -> 'SocketBuilder' : \"\"\" Sets the `socket_group` field of the `socket` section of a systemd service file. :param socket_group: The `socket_group` field of the `socket` section of a systemd service file :type socket_group: str :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _socket_group = socket_group return self def with_socket_mode ( self , socket_mode : str ) -> 'SocketBuilder' : \"\"\" Sets the `socket_mode` field of the `socket` section of a systemd service file. :param socket_mode: The `socket_mode` field of the `socket` section of a systemd service file :type socket_mode: str :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _socket_mode = socket_mode return self def with_service ( self , service : str ) -> 'SocketBuilder' : \"\"\" Sets the `service` field of the `socket` section of a systemd service file. :param service: The `service` field of the `socket` section of a systemd service file :type service: str :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _service = service return self allowed_none_fields : List [ str ] property Returns a list of fields that are allowed to be None Returns: Type Description List[str] List of fields that are allowed to be None build () Builds the socket section of a systemd service file. Returns: Type Description Socket The socket section of a systemd service file Source code in systemd_py/builders/socket.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def build ( self ) -> Socket : \"\"\" Builds the `socket` section of a systemd service file. :return: The `socket` section of a systemd service file :rtype: Socket \"\"\" self . _check () return Socket ( listen_stream = self . _listen_stream , listen_datagram = self . _listen_datagram , listen_sequential_packet = self . _listen_sequential_packet , listen_fifo = self . _listen_fifo , accept = self . _accept , socket_user = self . _socket_user , socket_group = self . _socket_group , socket_mode = self . _socket_mode , service = self . _service , ) with_accept ( accept ) Sets the accept field of the socket section of a systemd service file. Parameters: Name Type Description Default accept bool The accept field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 134 135 136 137 138 139 140 141 142 143 144 145 146 def with_accept ( self , accept : bool ) -> 'SocketBuilder' : \"\"\" Sets the `accept` field of the `socket` section of a systemd service file. :param accept: The `accept` field of the `socket` section of a systemd service file :type accept: bool :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _accept = accept return self with_listen_datagram ( listen_datagram ) Sets the listen_datagram field of the socket section of a systemd service file. Parameters: Name Type Description Default listen_datagram List [ str ] The listen_datagram field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 92 93 94 95 96 97 98 99 100 101 102 103 104 def with_listen_datagram ( self , listen_datagram : List [ str ]) -> 'SocketBuilder' : \"\"\" Sets the `listen_datagram` field of the `socket` section of a systemd service file. :param listen_datagram: The `listen_datagram` field of the `socket` section of a systemd service file :type listen_datagram: List[str] :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _listen_datagram = listen_datagram return self with_listen_fifo ( listen_fifo ) Sets the listen_fifo field of the socket section of a systemd service file. Parameters: Name Type Description Default listen_fifo List [ str ] The listen_fifo field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 120 121 122 123 124 125 126 127 128 129 130 131 132 def with_listen_fifo ( self , listen_fifo : List [ str ]) -> 'SocketBuilder' : \"\"\" Sets the `listen_fifo` field of the `socket` section of a systemd service file. :param listen_fifo: The `listen_fifo` field of the `socket` section of a systemd service file :type listen_fifo: List[str] :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _listen_fifo = listen_fifo return self with_listen_sequential_packet ( listen_sequential_packet ) Sets the listen_sequential_packet field of the socket section of a systemd service file. Parameters: Name Type Description Default listen_sequential_packet List [ str ] The listen_sequential_packet field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 106 107 108 109 110 111 112 113 114 115 116 117 118 def with_listen_sequential_packet ( self , listen_sequential_packet : List [ str ]) -> 'SocketBuilder' : \"\"\" Sets the `listen_sequential_packet` field of the `socket` section of a systemd service file. :param listen_sequential_packet: The `listen_sequential_packet` field of the `socket` section of a systemd service file :type listen_sequential_packet: List[str] :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _listen_sequential_packet = listen_sequential_packet return self with_listen_stream ( listen_stream ) Sets the listen_stream field of the socket section of a systemd service file. Parameters: Name Type Description Default listen_stream List [ str ] The listen_stream field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 78 79 80 81 82 83 84 85 86 87 88 89 90 def with_listen_stream ( self , listen_stream : List [ str ]) -> 'SocketBuilder' : \"\"\" Sets the `listen_stream` field of the `socket` section of a systemd service file. :param listen_stream: The `listen_stream` field of the `socket` section of a systemd service file :type listen_stream: List[str] :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _listen_stream = listen_stream return self with_service ( service ) Sets the service field of the socket section of a systemd service file. Parameters: Name Type Description Default service str The service field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 190 191 192 193 194 195 196 197 198 199 200 201 202 def with_service ( self , service : str ) -> 'SocketBuilder' : \"\"\" Sets the `service` field of the `socket` section of a systemd service file. :param service: The `service` field of the `socket` section of a systemd service file :type service: str :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _service = service return self with_socket_group ( socket_group ) Sets the socket_group field of the socket section of a systemd service file. Parameters: Name Type Description Default socket_group str The socket_group field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 162 163 164 165 166 167 168 169 170 171 172 173 174 def with_socket_group ( self , socket_group : str ) -> 'SocketBuilder' : \"\"\" Sets the `socket_group` field of the `socket` section of a systemd service file. :param socket_group: The `socket_group` field of the `socket` section of a systemd service file :type socket_group: str :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _socket_group = socket_group return self with_socket_mode ( socket_mode ) Sets the socket_mode field of the socket section of a systemd service file. Parameters: Name Type Description Default socket_mode str The socket_mode field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 176 177 178 179 180 181 182 183 184 185 186 187 188 def with_socket_mode ( self , socket_mode : str ) -> 'SocketBuilder' : \"\"\" Sets the `socket_mode` field of the `socket` section of a systemd service file. :param socket_mode: The `socket_mode` field of the `socket` section of a systemd service file :type socket_mode: str :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _socket_mode = socket_mode return self with_socket_user ( socket_user ) Sets the socket_user field of the socket section of a systemd service file. Parameters: Name Type Description Default socket_user str The socket_user field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 148 149 150 151 152 153 154 155 156 157 158 159 160 def with_socket_user ( self , socket_user : str ) -> 'SocketBuilder' : \"\"\" Sets the `socket_user` field of the `socket` section of a systemd service file. :param socket_user: The `socket_user` field of the `socket` section of a systemd service file :type socket_user: str :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _socket_user = socket_user return self","title":"socket"},{"location":"reference/builders/socket/#systemd_py.builders.socket--socket-builder","text":"Builder for the socket section of a systemd service file.","title":"Socket Builder \ud83c\udfd7\ufe0f"},{"location":"reference/builders/socket/#systemd_py.builders.socket.SocketBuilder","text":"Bases: _Builder Builder for the socket section of a systemd service file. Source code in systemd_py/builders/socket.pyclass SocketBuilder ( _Builder ): \"\"\" Builder for the `socket` section of a systemd service file. \"\"\" __slots__ = ( \"_listen_stream\" , \"_listen_datagram\" , \"_listen_sequential_packet\" , \"_listen_fifo\" , \"_accept\" , \"_socket_user\" , \"_socket_group\" , \"_socket_mode\" , \"_service\" , ) @property def allowed_none_fields ( self ) -> List [ str ]: \"\"\" Returns a list of fields that are allowed to be None :return: List of fields that are allowed to be None :rtype: List[str] \"\"\" return [ \"_listen_stream\" , \"_listen_datagram\" , \"_listen_sequential_packet\" , \"_listen_fifo\" , \"_accept\" , \"_socket_user\" , \"_socket_group\" , \"_socket_mode\" , \"_service\" , ] def build ( self ) -> Socket : \"\"\" Builds the `socket` section of a systemd service file. :return: The `socket` section of a systemd service file :rtype: Socket \"\"\" self . _check () return Socket ( listen_stream = self . _listen_stream , listen_datagram = self . _listen_datagram , listen_sequential_packet = self . _listen_sequential_packet , listen_fifo = self . _listen_fifo , accept = self . _accept , socket_user = self . _socket_user , socket_group = self . _socket_group , socket_mode = self . _socket_mode , service = self . _service , ) def __init__ ( self ): self . _listen_stream : Optional [ List [ str ]] = None self . _listen_datagram : Optional [ List [ str ]] = None self . _listen_sequential_packet : Optional [ List [ str ]] = None self . _listen_fifo : Optional [ List [ str ]] = None self . _accept : Optional [ bool ] = None self . _socket_user : Optional [ str ] = None self . _socket_group : Optional [ str ] = None self . _socket_mode : Optional [ str ] = None self . _service : Optional [ str ] = None def with_listen_stream ( self , listen_stream : List [ str ]) -> 'SocketBuilder' : \"\"\" Sets the `listen_stream` field of the `socket` section of a systemd service file. :param listen_stream: The `listen_stream` field of the `socket` section of a systemd service file :type listen_stream: List[str] :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _listen_stream = listen_stream return self def with_listen_datagram ( self , listen_datagram : List [ str ]) -> 'SocketBuilder' : \"\"\" Sets the `listen_datagram` field of the `socket` section of a systemd service file. :param listen_datagram: The `listen_datagram` field of the `socket` section of a systemd service file :type listen_datagram: List[str] :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _listen_datagram = listen_datagram return self def with_listen_sequential_packet ( self , listen_sequential_packet : List [ str ]) -> 'SocketBuilder' : \"\"\" Sets the `listen_sequential_packet` field of the `socket` section of a systemd service file. :param listen_sequential_packet: The `listen_sequential_packet` field of the `socket` section of a systemd service file :type listen_sequential_packet: List[str] :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _listen_sequential_packet = listen_sequential_packet return self def with_listen_fifo ( self , listen_fifo : List [ str ]) -> 'SocketBuilder' : \"\"\" Sets the `listen_fifo` field of the `socket` section of a systemd service file. :param listen_fifo: The `listen_fifo` field of the `socket` section of a systemd service file :type listen_fifo: List[str] :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _listen_fifo = listen_fifo return self def with_accept ( self , accept : bool ) -> 'SocketBuilder' : \"\"\" Sets the `accept` field of the `socket` section of a systemd service file. :param accept: The `accept` field of the `socket` section of a systemd service file :type accept: bool :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _accept = accept return self def with_socket_user ( self , socket_user : str ) -> 'SocketBuilder' : \"\"\" Sets the `socket_user` field of the `socket` section of a systemd service file. :param socket_user: The `socket_user` field of the `socket` section of a systemd service file :type socket_user: str :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _socket_user = socket_user return self def with_socket_group ( self , socket_group : str ) -> 'SocketBuilder' : \"\"\" Sets the `socket_group` field of the `socket` section of a systemd service file. :param socket_group: The `socket_group` field of the `socket` section of a systemd service file :type socket_group: str :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _socket_group = socket_group return self def with_socket_mode ( self , socket_mode : str ) -> 'SocketBuilder' : \"\"\" Sets the `socket_mode` field of the `socket` section of a systemd service file. :param socket_mode: The `socket_mode` field of the `socket` section of a systemd service file :type socket_mode: str :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _socket_mode = socket_mode return self def with_service ( self , service : str ) -> 'SocketBuilder' : \"\"\" Sets the `service` field of the `socket` section of a systemd service file. :param service: The `service` field of the `socket` section of a systemd service file :type service: str :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _service = service return self","title":"SocketBuilder"},{"location":"reference/builders/socket/#systemd_py.builders.socket.SocketBuilder.allowed_none_fields","text":"Returns a list of fields that are allowed to be None Returns: Type Description List[str] List of fields that are allowed to be None","title":"allowed_none_fields"},{"location":"reference/builders/socket/#systemd_py.builders.socket.SocketBuilder.build","text":"Builds the socket section of a systemd service file. Returns: Type Description Socket The socket section of a systemd service file Source code in systemd_py/builders/socket.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def build ( self ) -> Socket : \"\"\" Builds the `socket` section of a systemd service file. :return: The `socket` section of a systemd service file :rtype: Socket \"\"\" self . _check () return Socket ( listen_stream = self . _listen_stream , listen_datagram = self . _listen_datagram , listen_sequential_packet = self . _listen_sequential_packet , listen_fifo = self . _listen_fifo , accept = self . _accept , socket_user = self . _socket_user , socket_group = self . _socket_group , socket_mode = self . _socket_mode , service = self . _service , )","title":"build()"},{"location":"reference/builders/socket/#systemd_py.builders.socket.SocketBuilder.with_accept","text":"Sets the accept field of the socket section of a systemd service file. Parameters: Name Type Description Default accept bool The accept field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 134 135 136 137 138 139 140 141 142 143 144 145 146 def with_accept ( self , accept : bool ) -> 'SocketBuilder' : \"\"\" Sets the `accept` field of the `socket` section of a systemd service file. :param accept: The `accept` field of the `socket` section of a systemd service file :type accept: bool :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _accept = accept return self","title":"with_accept()"},{"location":"reference/builders/socket/#systemd_py.builders.socket.SocketBuilder.with_listen_datagram","text":"Sets the listen_datagram field of the socket section of a systemd service file. Parameters: Name Type Description Default listen_datagram List [ str ] The listen_datagram field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 92 93 94 95 96 97 98 99 100 101 102 103 104 def with_listen_datagram ( self , listen_datagram : List [ str ]) -> 'SocketBuilder' : \"\"\" Sets the `listen_datagram` field of the `socket` section of a systemd service file. :param listen_datagram: The `listen_datagram` field of the `socket` section of a systemd service file :type listen_datagram: List[str] :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _listen_datagram = listen_datagram return self","title":"with_listen_datagram()"},{"location":"reference/builders/socket/#systemd_py.builders.socket.SocketBuilder.with_listen_fifo","text":"Sets the listen_fifo field of the socket section of a systemd service file. Parameters: Name Type Description Default listen_fifo List [ str ] The listen_fifo field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 120 121 122 123 124 125 126 127 128 129 130 131 132 def with_listen_fifo ( self , listen_fifo : List [ str ]) -> 'SocketBuilder' : \"\"\" Sets the `listen_fifo` field of the `socket` section of a systemd service file. :param listen_fifo: The `listen_fifo` field of the `socket` section of a systemd service file :type listen_fifo: List[str] :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _listen_fifo = listen_fifo return self","title":"with_listen_fifo()"},{"location":"reference/builders/socket/#systemd_py.builders.socket.SocketBuilder.with_listen_sequential_packet","text":"Sets the listen_sequential_packet field of the socket section of a systemd service file. Parameters: Name Type Description Default listen_sequential_packet List [ str ] The listen_sequential_packet field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 106 107 108 109 110 111 112 113 114 115 116 117 118 def with_listen_sequential_packet ( self , listen_sequential_packet : List [ str ]) -> 'SocketBuilder' : \"\"\" Sets the `listen_sequential_packet` field of the `socket` section of a systemd service file. :param listen_sequential_packet: The `listen_sequential_packet` field of the `socket` section of a systemd service file :type listen_sequential_packet: List[str] :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _listen_sequential_packet = listen_sequential_packet return self","title":"with_listen_sequential_packet()"},{"location":"reference/builders/socket/#systemd_py.builders.socket.SocketBuilder.with_listen_stream","text":"Sets the listen_stream field of the socket section of a systemd service file. Parameters: Name Type Description Default listen_stream List [ str ] The listen_stream field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 78 79 80 81 82 83 84 85 86 87 88 89 90 def with_listen_stream ( self , listen_stream : List [ str ]) -> 'SocketBuilder' : \"\"\" Sets the `listen_stream` field of the `socket` section of a systemd service file. :param listen_stream: The `listen_stream` field of the `socket` section of a systemd service file :type listen_stream: List[str] :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _listen_stream = listen_stream return self","title":"with_listen_stream()"},{"location":"reference/builders/socket/#systemd_py.builders.socket.SocketBuilder.with_service","text":"Sets the service field of the socket section of a systemd service file. Parameters: Name Type Description Default service str The service field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 190 191 192 193 194 195 196 197 198 199 200 201 202 def with_service ( self , service : str ) -> 'SocketBuilder' : \"\"\" Sets the `service` field of the `socket` section of a systemd service file. :param service: The `service` field of the `socket` section of a systemd service file :type service: str :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _service = service return self","title":"with_service()"},{"location":"reference/builders/socket/#systemd_py.builders.socket.SocketBuilder.with_socket_group","text":"Sets the socket_group field of the socket section of a systemd service file. Parameters: Name Type Description Default socket_group str The socket_group field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 162 163 164 165 166 167 168 169 170 171 172 173 174 def with_socket_group ( self , socket_group : str ) -> 'SocketBuilder' : \"\"\" Sets the `socket_group` field of the `socket` section of a systemd service file. :param socket_group: The `socket_group` field of the `socket` section of a systemd service file :type socket_group: str :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _socket_group = socket_group return self","title":"with_socket_group()"},{"location":"reference/builders/socket/#systemd_py.builders.socket.SocketBuilder.with_socket_mode","text":"Sets the socket_mode field of the socket section of a systemd service file. Parameters: Name Type Description Default socket_mode str The socket_mode field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 176 177 178 179 180 181 182 183 184 185 186 187 188 def with_socket_mode ( self , socket_mode : str ) -> 'SocketBuilder' : \"\"\" Sets the `socket_mode` field of the `socket` section of a systemd service file. :param socket_mode: The `socket_mode` field of the `socket` section of a systemd service file :type socket_mode: str :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _socket_mode = socket_mode return self","title":"with_socket_mode()"},{"location":"reference/builders/socket/#systemd_py.builders.socket.SocketBuilder.with_socket_user","text":"Sets the socket_user field of the socket section of a systemd service file. Parameters: Name Type Description Default socket_user str The socket_user field of the socket section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/socket.py 148 149 150 151 152 153 154 155 156 157 158 159 160 def with_socket_user ( self , socket_user : str ) -> 'SocketBuilder' : \"\"\" Sets the `socket_user` field of the `socket` section of a systemd service file. :param socket_user: The `socket_user` field of the `socket` section of a systemd service file :type socket_user: str :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _socket_user = socket_user return self","title":"with_socket_user()"},{"location":"reference/builders/unit/","text":"Unit Builder \ud83c\udfd7\ufe0f Builder for the uni section of a systemd service file. UnitBuilder Bases: _Builder Builder for the unit section of a systemd service file. Source code in systemd_py/builders/unit.pyclass UnitBuilder ( _Builder ): \"\"\" Builder for the `unit` section of a systemd service file. \"\"\" __slots__ = ( \"_description\" , \"_documentation\" , \"_requires\" , \"_wants\" , \"_binds_to\" , \"_before\" , \"_after\" , \"_conflicts\" , \"_condition\" , \"_assert_\" , ) @property def allowed_none_fields ( self ) -> List [ str ]: \"\"\" Returns a list of fields that are allowed to be None :return: List of fields that are allowed to be None :rtype: List[str] \"\"\" return [ \"_documentation\" , \"_requires\" , \"_wants\" , \"_binds_to\" , \"_before\" , \"_after\" , \"_conflicts\" , \"_condition\" , \"_assert_\" , ] def build ( self ) -> Unit : \"\"\" Builds the `unit` section of a systemd service file. :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _check () return Unit ( description = self . _description , documentation = self . _documentation , requires = self . _requires , wants = self . _wants , binds_to = self . _binds_to , before = self . _before , after = self . _after , conflicts = self . _conflicts , condition = self . _condition , assert_ = self . _assert_ , ) def __init__ ( self ): self . _description : str = ... self . _documentation : Optional [ str ] = ... self . _requires : Optional [ List [ str ]] = ... self . _wants : Optional [ List [ str ]] = ... self . _binds_to : Optional [ List [ str ]] = ... self . _before : Optional [ List [ str ]] = ... self . _after : Optional [ List [ str ]] = ... self . _conflicts : Optional [ List [ str ]] = ... self . _condition : Optional [ str ] = ... self . _assert_ : Optional [ str ] = ... def with_description ( self , description : str ) -> 'UnitBuilder' : \"\"\" Sets the `description` field of the `unit` section of a systemd service file. :param description: The `description` field of the `unit` section of a systemd service file :type description: str :return: The `unit` section of a systemd service file :rtype: Unit :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _description = description return self def with_documentation ( self , documentation : str ) -> 'UnitBuilder' : \"\"\" Sets the `documentation` field of the `unit` section of a systemd service file. :param documentation: The `documentation` field of the `unit` section of a systemd service file :type documentation: str :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _documentation = documentation return self def with_requires ( self , requires : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `requires` field of the `unit` section of a systemd service file. :param requires: The `requires` field of the `unit` section of a systemd service file :type requires: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _requires = requires return self def with_wants ( self , wants : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `wants` field of the `unit` section of a systemd service file. :param wants: The `wants` field of the `unit` section of a systemd service file :type wants: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _wants = wants return self def with_binds_to ( self , binds_to : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `binds_to` field of the `unit` section of a systemd service file. :param binds_to: The `binds_to` field of the `unit` section of a systemd service file :type binds_to: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _binds_to = binds_to return self def with_before ( self , before : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `before` field of the `unit` section of a systemd service file. :param before: The `before` field of the `unit` section of a systemd service file :type before: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _before = before return self def with_after ( self , after : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `after` field of the `unit` section of a systemd service file. :param after: The `after` field of the `unit` section of a systemd service file :type after: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _after = after return self def with_conflicts ( self , conflicts : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `conflicts` field of the `unit` section of a systemd service file. :param conflicts: The `conflicts` field of the `unit` section of a systemd service file :type conflicts: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _conflicts = conflicts return self def with_condition ( self , condition : str ) -> 'UnitBuilder' : \"\"\" Sets the `condition` field of the `unit` section of a systemd service file. :param condition: The `condition` field of the `unit` section of a systemd service file :type condition: str :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _condition = condition return self def with_assert ( self , assert_ : str ) -> 'UnitBuilder' : \"\"\" Sets the `assert` field of the `unit` section of a systemd service file. :param assert_: The `assert` field of the `unit` section of a systemd service file :type assert_: str :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _assert_ = assert_ return self allowed_none_fields : List [ str ] property Returns a list of fields that are allowed to be None Returns: Type Description List[str] List of fields that are allowed to be None build () Builds the unit section of a systemd service file. Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 def build ( self ) -> Unit : \"\"\" Builds the `unit` section of a systemd service file. :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _check () return Unit ( description = self . _description , documentation = self . _documentation , requires = self . _requires , wants = self . _wants , binds_to = self . _binds_to , before = self . _before , after = self . _after , conflicts = self . _conflicts , condition = self . _condition , assert_ = self . _assert_ , ) with_after ( after ) Sets the after field of the unit section of a systemd service file. Parameters: Name Type Description Default after List [ str ] The after field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 167 168 169 170 171 172 173 174 175 176 177 178 179 def with_after ( self , after : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `after` field of the `unit` section of a systemd service file. :param after: The `after` field of the `unit` section of a systemd service file :type after: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _after = after return self with_assert ( assert_ ) Sets the assert field of the unit section of a systemd service file. Parameters: Name Type Description Default assert_ str The assert field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 209 210 211 212 213 214 215 216 217 218 219 220 221 def with_assert ( self , assert_ : str ) -> 'UnitBuilder' : \"\"\" Sets the `assert` field of the `unit` section of a systemd service file. :param assert_: The `assert` field of the `unit` section of a systemd service file :type assert_: str :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _assert_ = assert_ return self with_before ( before ) Sets the before field of the unit section of a systemd service file. Parameters: Name Type Description Default before List [ str ] The before field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 153 154 155 156 157 158 159 160 161 162 163 164 165 def with_before ( self , before : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `before` field of the `unit` section of a systemd service file. :param before: The `before` field of the `unit` section of a systemd service file :type before: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _before = before return self with_binds_to ( binds_to ) Sets the binds_to field of the unit section of a systemd service file. Parameters: Name Type Description Default binds_to List [ str ] The binds_to field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 139 140 141 142 143 144 145 146 147 148 149 150 151 def with_binds_to ( self , binds_to : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `binds_to` field of the `unit` section of a systemd service file. :param binds_to: The `binds_to` field of the `unit` section of a systemd service file :type binds_to: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _binds_to = binds_to return self with_condition ( condition ) Sets the condition field of the unit section of a systemd service file. Parameters: Name Type Description Default condition str The condition field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 195 196 197 198 199 200 201 202 203 204 205 206 207 def with_condition ( self , condition : str ) -> 'UnitBuilder' : \"\"\" Sets the `condition` field of the `unit` section of a systemd service file. :param condition: The `condition` field of the `unit` section of a systemd service file :type condition: str :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _condition = condition return self with_conflicts ( conflicts ) Sets the conflicts field of the unit section of a systemd service file. Parameters: Name Type Description Default conflicts List [ str ] The conflicts field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 181 182 183 184 185 186 187 188 189 190 191 192 193 def with_conflicts ( self , conflicts : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `conflicts` field of the `unit` section of a systemd service file. :param conflicts: The `conflicts` field of the `unit` section of a systemd service file :type conflicts: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _conflicts = conflicts return self with_description ( description ) Sets the description field of the unit section of a systemd service file. Parameters: Name Type Description Default description str The description field of the unit section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/unit.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def with_description ( self , description : str ) -> 'UnitBuilder' : \"\"\" Sets the `description` field of the `unit` section of a systemd service file. :param description: The `description` field of the `unit` section of a systemd service file :type description: str :return: The `unit` section of a systemd service file :rtype: Unit :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _description = description return self with_documentation ( documentation ) Sets the documentation field of the unit section of a systemd service file. Parameters: Name Type Description Default documentation str The documentation field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 97 98 99 100 101 102 103 104 105 106 107 108 109 def with_documentation ( self , documentation : str ) -> 'UnitBuilder' : \"\"\" Sets the `documentation` field of the `unit` section of a systemd service file. :param documentation: The `documentation` field of the `unit` section of a systemd service file :type documentation: str :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _documentation = documentation return self with_requires ( requires ) Sets the requires field of the unit section of a systemd service file. Parameters: Name Type Description Default requires List [ str ] The requires field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 111 112 113 114 115 116 117 118 119 120 121 122 123 def with_requires ( self , requires : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `requires` field of the `unit` section of a systemd service file. :param requires: The `requires` field of the `unit` section of a systemd service file :type requires: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _requires = requires return self with_wants ( wants ) Sets the wants field of the unit section of a systemd service file. Parameters: Name Type Description Default wants List [ str ] The wants field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 125 126 127 128 129 130 131 132 133 134 135 136 137 def with_wants ( self , wants : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `wants` field of the `unit` section of a systemd service file. :param wants: The `wants` field of the `unit` section of a systemd service file :type wants: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _wants = wants return self","title":"unit"},{"location":"reference/builders/unit/#systemd_py.builders.unit--unit-builder","text":"Builder for the uni section of a systemd service file.","title":"Unit Builder \ud83c\udfd7\ufe0f"},{"location":"reference/builders/unit/#systemd_py.builders.unit.UnitBuilder","text":"Bases: _Builder Builder for the unit section of a systemd service file. Source code in systemd_py/builders/unit.pyclass UnitBuilder ( _Builder ): \"\"\" Builder for the `unit` section of a systemd service file. \"\"\" __slots__ = ( \"_description\" , \"_documentation\" , \"_requires\" , \"_wants\" , \"_binds_to\" , \"_before\" , \"_after\" , \"_conflicts\" , \"_condition\" , \"_assert_\" , ) @property def allowed_none_fields ( self ) -> List [ str ]: \"\"\" Returns a list of fields that are allowed to be None :return: List of fields that are allowed to be None :rtype: List[str] \"\"\" return [ \"_documentation\" , \"_requires\" , \"_wants\" , \"_binds_to\" , \"_before\" , \"_after\" , \"_conflicts\" , \"_condition\" , \"_assert_\" , ] def build ( self ) -> Unit : \"\"\" Builds the `unit` section of a systemd service file. :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _check () return Unit ( description = self . _description , documentation = self . _documentation , requires = self . _requires , wants = self . _wants , binds_to = self . _binds_to , before = self . _before , after = self . _after , conflicts = self . _conflicts , condition = self . _condition , assert_ = self . _assert_ , ) def __init__ ( self ): self . _description : str = ... self . _documentation : Optional [ str ] = ... self . _requires : Optional [ List [ str ]] = ... self . _wants : Optional [ List [ str ]] = ... self . _binds_to : Optional [ List [ str ]] = ... self . _before : Optional [ List [ str ]] = ... self . _after : Optional [ List [ str ]] = ... self . _conflicts : Optional [ List [ str ]] = ... self . _condition : Optional [ str ] = ... self . _assert_ : Optional [ str ] = ... def with_description ( self , description : str ) -> 'UnitBuilder' : \"\"\" Sets the `description` field of the `unit` section of a systemd service file. :param description: The `description` field of the `unit` section of a systemd service file :type description: str :return: The `unit` section of a systemd service file :rtype: Unit :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _description = description return self def with_documentation ( self , documentation : str ) -> 'UnitBuilder' : \"\"\" Sets the `documentation` field of the `unit` section of a systemd service file. :param documentation: The `documentation` field of the `unit` section of a systemd service file :type documentation: str :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _documentation = documentation return self def with_requires ( self , requires : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `requires` field of the `unit` section of a systemd service file. :param requires: The `requires` field of the `unit` section of a systemd service file :type requires: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _requires = requires return self def with_wants ( self , wants : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `wants` field of the `unit` section of a systemd service file. :param wants: The `wants` field of the `unit` section of a systemd service file :type wants: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _wants = wants return self def with_binds_to ( self , binds_to : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `binds_to` field of the `unit` section of a systemd service file. :param binds_to: The `binds_to` field of the `unit` section of a systemd service file :type binds_to: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _binds_to = binds_to return self def with_before ( self , before : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `before` field of the `unit` section of a systemd service file. :param before: The `before` field of the `unit` section of a systemd service file :type before: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _before = before return self def with_after ( self , after : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `after` field of the `unit` section of a systemd service file. :param after: The `after` field of the `unit` section of a systemd service file :type after: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _after = after return self def with_conflicts ( self , conflicts : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `conflicts` field of the `unit` section of a systemd service file. :param conflicts: The `conflicts` field of the `unit` section of a systemd service file :type conflicts: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _conflicts = conflicts return self def with_condition ( self , condition : str ) -> 'UnitBuilder' : \"\"\" Sets the `condition` field of the `unit` section of a systemd service file. :param condition: The `condition` field of the `unit` section of a systemd service file :type condition: str :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _condition = condition return self def with_assert ( self , assert_ : str ) -> 'UnitBuilder' : \"\"\" Sets the `assert` field of the `unit` section of a systemd service file. :param assert_: The `assert` field of the `unit` section of a systemd service file :type assert_: str :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _assert_ = assert_ return self","title":"UnitBuilder"},{"location":"reference/builders/unit/#systemd_py.builders.unit.UnitBuilder.allowed_none_fields","text":"Returns a list of fields that are allowed to be None Returns: Type Description List[str] List of fields that are allowed to be None","title":"allowed_none_fields"},{"location":"reference/builders/unit/#systemd_py.builders.unit.UnitBuilder.build","text":"Builds the unit section of a systemd service file. Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 def build ( self ) -> Unit : \"\"\" Builds the `unit` section of a systemd service file. :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _check () return Unit ( description = self . _description , documentation = self . _documentation , requires = self . _requires , wants = self . _wants , binds_to = self . _binds_to , before = self . _before , after = self . _after , conflicts = self . _conflicts , condition = self . _condition , assert_ = self . _assert_ , )","title":"build()"},{"location":"reference/builders/unit/#systemd_py.builders.unit.UnitBuilder.with_after","text":"Sets the after field of the unit section of a systemd service file. Parameters: Name Type Description Default after List [ str ] The after field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 167 168 169 170 171 172 173 174 175 176 177 178 179 def with_after ( self , after : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `after` field of the `unit` section of a systemd service file. :param after: The `after` field of the `unit` section of a systemd service file :type after: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _after = after return self","title":"with_after()"},{"location":"reference/builders/unit/#systemd_py.builders.unit.UnitBuilder.with_assert","text":"Sets the assert field of the unit section of a systemd service file. Parameters: Name Type Description Default assert_ str The assert field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 209 210 211 212 213 214 215 216 217 218 219 220 221 def with_assert ( self , assert_ : str ) -> 'UnitBuilder' : \"\"\" Sets the `assert` field of the `unit` section of a systemd service file. :param assert_: The `assert` field of the `unit` section of a systemd service file :type assert_: str :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _assert_ = assert_ return self","title":"with_assert()"},{"location":"reference/builders/unit/#systemd_py.builders.unit.UnitBuilder.with_before","text":"Sets the before field of the unit section of a systemd service file. Parameters: Name Type Description Default before List [ str ] The before field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 153 154 155 156 157 158 159 160 161 162 163 164 165 def with_before ( self , before : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `before` field of the `unit` section of a systemd service file. :param before: The `before` field of the `unit` section of a systemd service file :type before: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _before = before return self","title":"with_before()"},{"location":"reference/builders/unit/#systemd_py.builders.unit.UnitBuilder.with_binds_to","text":"Sets the binds_to field of the unit section of a systemd service file. Parameters: Name Type Description Default binds_to List [ str ] The binds_to field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 139 140 141 142 143 144 145 146 147 148 149 150 151 def with_binds_to ( self , binds_to : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `binds_to` field of the `unit` section of a systemd service file. :param binds_to: The `binds_to` field of the `unit` section of a systemd service file :type binds_to: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _binds_to = binds_to return self","title":"with_binds_to()"},{"location":"reference/builders/unit/#systemd_py.builders.unit.UnitBuilder.with_condition","text":"Sets the condition field of the unit section of a systemd service file. Parameters: Name Type Description Default condition str The condition field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 195 196 197 198 199 200 201 202 203 204 205 206 207 def with_condition ( self , condition : str ) -> 'UnitBuilder' : \"\"\" Sets the `condition` field of the `unit` section of a systemd service file. :param condition: The `condition` field of the `unit` section of a systemd service file :type condition: str :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _condition = condition return self","title":"with_condition()"},{"location":"reference/builders/unit/#systemd_py.builders.unit.UnitBuilder.with_conflicts","text":"Sets the conflicts field of the unit section of a systemd service file. Parameters: Name Type Description Default conflicts List [ str ] The conflicts field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 181 182 183 184 185 186 187 188 189 190 191 192 193 def with_conflicts ( self , conflicts : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `conflicts` field of the `unit` section of a systemd service file. :param conflicts: The `conflicts` field of the `unit` section of a systemd service file :type conflicts: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _conflicts = conflicts return self","title":"with_conflicts()"},{"location":"reference/builders/unit/#systemd_py.builders.unit.UnitBuilder.with_description","text":"Sets the description field of the unit section of a systemd service file. Parameters: Name Type Description Default description str The description field of the unit section of a systemd service file required Returns: Type Description SocketBuilder The SocketBuilder object Source code in systemd_py/builders/unit.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def with_description ( self , description : str ) -> 'UnitBuilder' : \"\"\" Sets the `description` field of the `unit` section of a systemd service file. :param description: The `description` field of the `unit` section of a systemd service file :type description: str :return: The `unit` section of a systemd service file :rtype: Unit :return: The SocketBuilder object :rtype: SocketBuilder \"\"\" self . _description = description return self","title":"with_description()"},{"location":"reference/builders/unit/#systemd_py.builders.unit.UnitBuilder.with_documentation","text":"Sets the documentation field of the unit section of a systemd service file. Parameters: Name Type Description Default documentation str The documentation field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 97 98 99 100 101 102 103 104 105 106 107 108 109 def with_documentation ( self , documentation : str ) -> 'UnitBuilder' : \"\"\" Sets the `documentation` field of the `unit` section of a systemd service file. :param documentation: The `documentation` field of the `unit` section of a systemd service file :type documentation: str :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _documentation = documentation return self","title":"with_documentation()"},{"location":"reference/builders/unit/#systemd_py.builders.unit.UnitBuilder.with_requires","text":"Sets the requires field of the unit section of a systemd service file. Parameters: Name Type Description Default requires List [ str ] The requires field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 111 112 113 114 115 116 117 118 119 120 121 122 123 def with_requires ( self , requires : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `requires` field of the `unit` section of a systemd service file. :param requires: The `requires` field of the `unit` section of a systemd service file :type requires: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _requires = requires return self","title":"with_requires()"},{"location":"reference/builders/unit/#systemd_py.builders.unit.UnitBuilder.with_wants","text":"Sets the wants field of the unit section of a systemd service file. Parameters: Name Type Description Default wants List [ str ] The wants field of the unit section of a systemd service file required Returns: Type Description Unit The unit section of a systemd service file Source code in systemd_py/builders/unit.py 125 126 127 128 129 130 131 132 133 134 135 136 137 def with_wants ( self , wants : List [ str ]) -> 'UnitBuilder' : \"\"\" Sets the `wants` field of the `unit` section of a systemd service file. :param wants: The `wants` field of the `unit` section of a systemd service file :type wants: List[str] :return: The `unit` section of a systemd service file :rtype: Unit \"\"\" self . _wants = wants return self","title":"with_wants()"},{"location":"reference/commands/","text":"","title":"commands"},{"location":"reference/commands/cli/","text":"","title":"cli"},{"location":"reference/commands/interactive/","text":"","title":"interactive"},{"location":"reference/core/","text":"","title":"core"},{"location":"reference/core/models/","text":"Models for systemd_py","title":"models"},{"location":"reference/core/models/#systemd_py.core.models--models-for-systemd_py","text":"","title":"Models for systemd_py"},{"location":"reference/core/models/install/","text":"Install Bases: Section Systemd [Install] Section Directives Source code in systemd_py/core/models/install.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class Install ( Section ): \"\"\" Systemd [Install] Section Directives \"\"\" wanted_by : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'WantedBy' , description = 'A space-separated list of units that should be started when this unit is.' , ) required_by : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'RequiredBy' , description = 'A space-separated list of units that must be started when this unit is.' ) alias : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'Alias' , description = 'A space-separated list of additional names for this unit.' ) also : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'Also' , description = 'A space-separated list of units that should be installed when this unit is.' ) default_instance : Optional [ str ] = Field ( None , title = 'DefaultInstance' , description = 'The default instance name for this template unit.' ) class Config : fields = { 'WantedBy' : 'wanted_by' , 'RequiredBy' : 'required_by' , 'Alias' : 'alias' , 'Also' : 'also' , 'DefaultInstance' : 'default_instance' }","title":"install"},{"location":"reference/core/models/install/#systemd_py.core.models.install.Install","text":"Bases: Section Systemd [Install] Section Directives Source code in systemd_py/core/models/install.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class Install ( Section ): \"\"\" Systemd [Install] Section Directives \"\"\" wanted_by : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'WantedBy' , description = 'A space-separated list of units that should be started when this unit is.' , ) required_by : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'RequiredBy' , description = 'A space-separated list of units that must be started when this unit is.' ) alias : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'Alias' , description = 'A space-separated list of additional names for this unit.' ) also : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'Also' , description = 'A space-separated list of units that should be installed when this unit is.' ) default_instance : Optional [ str ] = Field ( None , title = 'DefaultInstance' , description = 'The default instance name for this template unit.' ) class Config : fields = { 'WantedBy' : 'wanted_by' , 'RequiredBy' : 'required_by' , 'Alias' : 'alias' , 'Also' : 'also' , 'DefaultInstance' : 'default_instance' }","title":"Install"},{"location":"reference/core/models/service/","text":"Service Bases: Section Systemd [Service] Section Directives Source code in systemd_py/core/models/service.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 class Service ( Section ): \"\"\" Systemd [Service] Section Directives \"\"\" type : Optional [ TypeType ] = Field ( None , title = \"Type\" , description = \"The type of service to start. One of simple, forking, oneshot, dbus, notify, idle, or \" \"exec. If this option is not specified, simple is assumed.\" ) remain_after_exit : Optional [ bool ] = Field ( None , title = \"RemainAfterExit\" , description = \"This directive is commonly used with the oneshot type. It indicates that \" \"the service should be considered active even after the process exits.\" ) pid_file : Optional [ str ] = Field ( None , title = \"PIDFile\" , description = \"If the service type is marked as \u201cforking\u201d, this directive is used to set the \" \"path of the file that should contain the process ID number of the main child \" \"that should be monitored.\" ) bus_name : Optional [ str ] = Field ( None , title = \"BusName\" , description = \"This directive should be set to the D-Bus bus name that the service will attempt \" \"to acquire when using the \u201cdbus\u201d service type.\" ) notify_access : Optional [ str ] = Field ( None , title = \"NotifyAccess\" , description = 'This specifies access to the socket that should be used to listen for notifications ' 'when the \u201cnotify\u201d service type is selected This can be \u201cnone\u201d, \u201cmain\u201d, or \"all. ' 'The default, \u201cnone\u201d, ignores all status messages. The \u201cmain\u201d option will listen to ' 'messages from the main process and the \u201call\u201d option will cause all members of ' 'the service\u2019s control group to be processed.' ) exec_start : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ExecStart\" , description = \"This specifies the full path and the arguments of the command to be executed to \" \"start the process. This may only be specified once (except for \u201coneshot\u201d services). \" \"If the path to the command is preceded by a dash \u201c-\u201d character, non-zero exit \" \"statuses will be accepted without marking the unit activation as failed.\" ) exec_start_pre : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ExecStartPre\" , description = \"This can be used to provide additional commands that should be executed before \" \"the main process is started. This can be used multiple times. Again, \" \"commands must specify a full path and they can be preceded by \u201c-\u201d to indicate that \" \"the failure of the command will be tolerated.\" ) exec_start_post : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ExecStartPost\" , description = \"This has the same exact qualities as `ExecStartPre=` except that it specifies \" \"commands that will be run after the main process is started.\" ) exec_reload : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ExecReload\" , description = \"This optional directive indicates the command necessary to reload the \" \"configuration of the service if available\" ) exec_stop : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ExecStop\" , description = \"This indicates the command needed to stop the service. If this is not given, \" \"the process will be killed immediately when the service is stopped.\" ) exec_stop_post : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ExecStopPost\" , description = \"This can be used to specify commands to execute following the stop command\" ) restart_sec : Optional [ int ] = Field ( None , title = 'RestartSec' , description = 'If automatically restarting the service is enabled, this specifies the amount of time to ' 'wait before attempting to restart the service.' ) restart : Optional [ RestartType ] = Field ( None , title = 'Restart' , description = 'This indicates the circumstances under which systemd will attempt to automatically restart the ' 'service. This can be set to values like \u201calways\u201d, \u201con-success\u201d, \u201con-failure\u201d, \u201con-abnormal\u201d, ' '\u201con-abort\u201d, or \u201con-watchdog\u201d. These will trigger a restart according to the way that the service ' 'was stopped.' ) timeout_sec : Optional [ int ] = Field ( None , title = 'TimeoutSec' , description = 'This configures the amount of time that systemd will wait when stopping or stopping the service ' 'before marking it as failed or forcefully killing it. You can set separate timeouts with ' 'TimeoutStartSec= and TimeoutStopSec= as well.' ) user : Optional [ str ] = Field ( None , title = 'User' , description = 'This specifies the user that the service should be run as. This can be a user name or a numeric ' 'UID. If this is not specified, the service will be run as root.' ) group : Optional [ str ] = Field ( None , title = 'Group' , description = 'This specifies the group that the service should be run as. This can be a group name or a numeric ' 'GID. If this is not specified, the service will be run as root.' ) nice : Optional [ int ] = Field ( None , title = 'Nice' , description = 'This specifies the nice level of the service. This can be a value between -20 and 19. ' 'The default is 0.' ) class Config : fields = { 'remain_after_exit' : 'RemainAfterExit' , 'pid_file' : 'PIDFile' , 'bus_name' : 'BusName' , 'notify_access' : 'NotifyAccess' , 'exec_start' : 'ExecStart' , 'exec_start_pre' : 'ExecStartPre' , 'exec_start_post' : 'ExecStartPost' , 'exec_reload' : 'ExecReload' , 'exec_stop' : 'ExecStop' , 'exec_stop_post' : 'ExecStopPost' , 'restart_sec' : 'RestartSec' , 'timeout_sec' : 'TimeoutSec' , 'user' : 'User' , 'group' : 'Group' , 'nice' : 'Nice' , }","title":"service"},{"location":"reference/core/models/service/#systemd_py.core.models.service.Service","text":"Bases: Section Systemd [Service] Section Directives Source code in systemd_py/core/models/service.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 class Service ( Section ): \"\"\" Systemd [Service] Section Directives \"\"\" type : Optional [ TypeType ] = Field ( None , title = \"Type\" , description = \"The type of service to start. One of simple, forking, oneshot, dbus, notify, idle, or \" \"exec. If this option is not specified, simple is assumed.\" ) remain_after_exit : Optional [ bool ] = Field ( None , title = \"RemainAfterExit\" , description = \"This directive is commonly used with the oneshot type. It indicates that \" \"the service should be considered active even after the process exits.\" ) pid_file : Optional [ str ] = Field ( None , title = \"PIDFile\" , description = \"If the service type is marked as \u201cforking\u201d, this directive is used to set the \" \"path of the file that should contain the process ID number of the main child \" \"that should be monitored.\" ) bus_name : Optional [ str ] = Field ( None , title = \"BusName\" , description = \"This directive should be set to the D-Bus bus name that the service will attempt \" \"to acquire when using the \u201cdbus\u201d service type.\" ) notify_access : Optional [ str ] = Field ( None , title = \"NotifyAccess\" , description = 'This specifies access to the socket that should be used to listen for notifications ' 'when the \u201cnotify\u201d service type is selected This can be \u201cnone\u201d, \u201cmain\u201d, or \"all. ' 'The default, \u201cnone\u201d, ignores all status messages. The \u201cmain\u201d option will listen to ' 'messages from the main process and the \u201call\u201d option will cause all members of ' 'the service\u2019s control group to be processed.' ) exec_start : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ExecStart\" , description = \"This specifies the full path and the arguments of the command to be executed to \" \"start the process. This may only be specified once (except for \u201coneshot\u201d services). \" \"If the path to the command is preceded by a dash \u201c-\u201d character, non-zero exit \" \"statuses will be accepted without marking the unit activation as failed.\" ) exec_start_pre : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ExecStartPre\" , description = \"This can be used to provide additional commands that should be executed before \" \"the main process is started. This can be used multiple times. Again, \" \"commands must specify a full path and they can be preceded by \u201c-\u201d to indicate that \" \"the failure of the command will be tolerated.\" ) exec_start_post : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ExecStartPost\" , description = \"This has the same exact qualities as `ExecStartPre=` except that it specifies \" \"commands that will be run after the main process is started.\" ) exec_reload : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ExecReload\" , description = \"This optional directive indicates the command necessary to reload the \" \"configuration of the service if available\" ) exec_stop : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ExecStop\" , description = \"This indicates the command needed to stop the service. If this is not given, \" \"the process will be killed immediately when the service is stopped.\" ) exec_stop_post : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ExecStopPost\" , description = \"This can be used to specify commands to execute following the stop command\" ) restart_sec : Optional [ int ] = Field ( None , title = 'RestartSec' , description = 'If automatically restarting the service is enabled, this specifies the amount of time to ' 'wait before attempting to restart the service.' ) restart : Optional [ RestartType ] = Field ( None , title = 'Restart' , description = 'This indicates the circumstances under which systemd will attempt to automatically restart the ' 'service. This can be set to values like \u201calways\u201d, \u201con-success\u201d, \u201con-failure\u201d, \u201con-abnormal\u201d, ' '\u201con-abort\u201d, or \u201con-watchdog\u201d. These will trigger a restart according to the way that the service ' 'was stopped.' ) timeout_sec : Optional [ int ] = Field ( None , title = 'TimeoutSec' , description = 'This configures the amount of time that systemd will wait when stopping or stopping the service ' 'before marking it as failed or forcefully killing it. You can set separate timeouts with ' 'TimeoutStartSec= and TimeoutStopSec= as well.' ) user : Optional [ str ] = Field ( None , title = 'User' , description = 'This specifies the user that the service should be run as. This can be a user name or a numeric ' 'UID. If this is not specified, the service will be run as root.' ) group : Optional [ str ] = Field ( None , title = 'Group' , description = 'This specifies the group that the service should be run as. This can be a group name or a numeric ' 'GID. If this is not specified, the service will be run as root.' ) nice : Optional [ int ] = Field ( None , title = 'Nice' , description = 'This specifies the nice level of the service. This can be a value between -20 and 19. ' 'The default is 0.' ) class Config : fields = { 'remain_after_exit' : 'RemainAfterExit' , 'pid_file' : 'PIDFile' , 'bus_name' : 'BusName' , 'notify_access' : 'NotifyAccess' , 'exec_start' : 'ExecStart' , 'exec_start_pre' : 'ExecStartPre' , 'exec_start_post' : 'ExecStartPost' , 'exec_reload' : 'ExecReload' , 'exec_stop' : 'ExecStop' , 'exec_stop_post' : 'ExecStopPost' , 'restart_sec' : 'RestartSec' , 'timeout_sec' : 'TimeoutSec' , 'user' : 'User' , 'group' : 'Group' , 'nice' : 'Nice' , }","title":"Service"},{"location":"reference/core/models/socket/","text":"Socket Bases: Section Systemd [Socket] Section Directives Source code in systemd_py/core/models/socket.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 class Socket ( Section ): \"\"\" Systemd [Socket] Section Directives \"\"\" listen_stream : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ListenStream\" , description = \"This defines an address for a stream socket which supports sequential, reliable \" \"communication. Services that use TCP should use this socket type.\" ) listen_datagram : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ListenDatagram\" , description = \"This defines an address for a datagram socket which supports fast, unreliable \" \"communication packets. Services that use UDP should set this socket type.\" ) listen_sequential_packet : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ListenSequentialPacket\" , description = \"This defines an address for sequential, reliable communication with max length \" \"datagrams that preserves message boundaries. This is found most often for Unix sockets.\" ) listen_fifo : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ListenFIFO\" , description = \"Along with the other listening types, you can also specify a FIFO buffer instead of a socket.\" ) accept : Optional [ bool ] = Field ( None , title = \"Accept\" , description = \"This determines whether an additional instance of the service will be each connection. \" \"If set to false (the default), one instance will handle all connections.\" ) socket_user : Optional [ str ] = Field ( None , title = \"SocketUser\" , description = \"With a Unix socket, specifies the owner of the socket. This will be the root user if left unset.\" ) socket_group : Optional [ str ] = Field ( None , title = \"SocketGroup\" , description = \"With a Unix socket, specifies the group owner of the socket. This will be the root \" \"group if neither this or the above are set. If only the SocketUser= is set, \" \"systemd will try to find a matching group.\" ) socket_mode : Optional [ str ] = Field ( None , title = \"SocketMode\" , description = \"For Unix sockets or FIFO buffers, this sets the permissions on the created entity.\" ) service : Optional [ str ] = Field ( None , title = \"Service\" , description = \"If the service name does not match the .socket name, the service can be \" \"specified with this directive.\" ) class Config : fields = { 'ListenStream' : 'listen_stream' , 'ListenDatagram' : 'listen_datagram' , 'ListenSequentialPacket' : 'listen_sequential_packet' , 'ListenFIFO' : 'listen_fifo' , 'Accept' : 'accept' , 'SocketUser' : 'socket_user' , 'SocketGroup' : 'socket_group' , 'SocketMode' : 'socket_mode' , 'Service' : 'service' }","title":"socket"},{"location":"reference/core/models/socket/#systemd_py.core.models.socket.Socket","text":"Bases: Section Systemd [Socket] Section Directives Source code in systemd_py/core/models/socket.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 class Socket ( Section ): \"\"\" Systemd [Socket] Section Directives \"\"\" listen_stream : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ListenStream\" , description = \"This defines an address for a stream socket which supports sequential, reliable \" \"communication. Services that use TCP should use this socket type.\" ) listen_datagram : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ListenDatagram\" , description = \"This defines an address for a datagram socket which supports fast, unreliable \" \"communication packets. Services that use UDP should set this socket type.\" ) listen_sequential_packet : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ListenSequentialPacket\" , description = \"This defines an address for sequential, reliable communication with max length \" \"datagrams that preserves message boundaries. This is found most often for Unix sockets.\" ) listen_fifo : Optional [ Union [ str , List [ str ]]] = Field ( None , title = \"ListenFIFO\" , description = \"Along with the other listening types, you can also specify a FIFO buffer instead of a socket.\" ) accept : Optional [ bool ] = Field ( None , title = \"Accept\" , description = \"This determines whether an additional instance of the service will be each connection. \" \"If set to false (the default), one instance will handle all connections.\" ) socket_user : Optional [ str ] = Field ( None , title = \"SocketUser\" , description = \"With a Unix socket, specifies the owner of the socket. This will be the root user if left unset.\" ) socket_group : Optional [ str ] = Field ( None , title = \"SocketGroup\" , description = \"With a Unix socket, specifies the group owner of the socket. This will be the root \" \"group if neither this or the above are set. If only the SocketUser= is set, \" \"systemd will try to find a matching group.\" ) socket_mode : Optional [ str ] = Field ( None , title = \"SocketMode\" , description = \"For Unix sockets or FIFO buffers, this sets the permissions on the created entity.\" ) service : Optional [ str ] = Field ( None , title = \"Service\" , description = \"If the service name does not match the .socket name, the service can be \" \"specified with this directive.\" ) class Config : fields = { 'ListenStream' : 'listen_stream' , 'ListenDatagram' : 'listen_datagram' , 'ListenSequentialPacket' : 'listen_sequential_packet' , 'ListenFIFO' : 'listen_fifo' , 'Accept' : 'accept' , 'SocketUser' : 'socket_user' , 'SocketGroup' : 'socket_group' , 'SocketMode' : 'socket_mode' , 'Service' : 'service' }","title":"Socket"},{"location":"reference/core/models/unit/","text":"Unit Bases: Section Systemd [Unit] Section Directives Source code in systemd_py/core/models/unit.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class Unit ( Section ): \"\"\" Systemd [Unit] Section Directives \"\"\" description : str = Field ( None , title = 'Description' , description = 'A short, one-line description of the service.' ) documentation : Optional [ str ] = Field ( None , title = 'Documentation' , description = 'A space-separated list of URLs to documentation for this unit.' ) requires : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'Requires' , description = 'A space-separated list of units that must be started before this unit.' ) wants : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'Wants' , description = 'A space-separated list of units that should be started if this unit is.' ) binds_to : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'BindsTo' , description = 'A space-separated list of units that this unit is bound to.' ) before : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'Before' , description = 'A space-separated list of units that should be stopped if this unit is.' ) after : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'After' , description = 'A space-separated list of units that must be stopped before this unit is.' ) conflicts : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'Conflicts' , description = 'A space-separated list of units that this unit conflicts with.' ) condition : Optional [ str ] = Field ( None , title = 'Condition' , description = 'A boolean expression that must be true for the unit to be started.' ) assert_ : Optional [ str ] = Field ( None , title = 'Assert' , description = 'A boolean expression that must be true for the unit to be started.' ) class Config : fields = { 'Description' : 'description' , 'Documentation' : 'documentation' , 'Requires' : 'requires' , 'Wants' : 'wants' , 'BindsTo' : 'binds_to' , 'Before' : 'before' , 'After' : 'after' , 'Conflicts' : 'conflicts' , 'Condition' : 'condition' , 'Assert' : 'assert_' }","title":"unit"},{"location":"reference/core/models/unit/#systemd_py.core.models.unit.Unit","text":"Bases: Section Systemd [Unit] Section Directives Source code in systemd_py/core/models/unit.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class Unit ( Section ): \"\"\" Systemd [Unit] Section Directives \"\"\" description : str = Field ( None , title = 'Description' , description = 'A short, one-line description of the service.' ) documentation : Optional [ str ] = Field ( None , title = 'Documentation' , description = 'A space-separated list of URLs to documentation for this unit.' ) requires : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'Requires' , description = 'A space-separated list of units that must be started before this unit.' ) wants : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'Wants' , description = 'A space-separated list of units that should be started if this unit is.' ) binds_to : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'BindsTo' , description = 'A space-separated list of units that this unit is bound to.' ) before : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'Before' , description = 'A space-separated list of units that should be stopped if this unit is.' ) after : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'After' , description = 'A space-separated list of units that must be stopped before this unit is.' ) conflicts : Optional [ Union [ str , List [ str ]]] = Field ( None , title = 'Conflicts' , description = 'A space-separated list of units that this unit conflicts with.' ) condition : Optional [ str ] = Field ( None , title = 'Condition' , description = 'A boolean expression that must be true for the unit to be started.' ) assert_ : Optional [ str ] = Field ( None , title = 'Assert' , description = 'A boolean expression that must be true for the unit to be started.' ) class Config : fields = { 'Description' : 'description' , 'Documentation' : 'documentation' , 'Requires' : 'requires' , 'Wants' : 'wants' , 'BindsTo' : 'binds_to' , 'Before' : 'before' , 'After' : 'after' , 'Conflicts' : 'conflicts' , 'Condition' : 'condition' , 'Assert' : 'assert_' }","title":"Unit"},{"location":"reference/interactive/","text":"","title":"interactive"},{"location":"reference/interactive/simple_builder/","text":"","title":"simple_builder"},{"location":"reference/utils/","text":"Utilities for systemd_py","title":"utils"},{"location":"reference/utils/daemon/","text":"Daemon Systemd daemon Source code in systemd_py/utils/daemon.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 class Daemon : \"\"\" Systemd daemon \"\"\" def __init__ ( self , name : str ): \"\"\" Systemd daemon :param name: Name of the systemd daemon :type name: str \"\"\" self . _name = name @staticmethod def reload () -> None : \"\"\" Reload systemd daemon \"\"\" subprocess . run ([ 'systemctl' , 'daemon-reload' ], check = True ) print ( 'Reloaded systemd daemon' ) def enable ( self ) -> None : \"\"\" Enable systemd service \"\"\" subprocess . run ([ 'systemctl' , 'enable' , self . _name ], check = True ) print ( f 'Enabled { self . _name } ' ) def disable ( self ) -> None : \"\"\" Disable systemd service \"\"\" subprocess . run ([ 'systemctl' , 'disable' , self . _name ], check = True ) print ( f 'Disabled { self . _name } ' ) def start ( self ) -> None : \"\"\" Start systemd service \"\"\" subprocess . run ([ 'systemctl' , 'start' , self . _name ], check = True ) print ( f 'Started { self . _name } ' ) def stop ( self ) -> None : \"\"\" Stop systemd service \"\"\" subprocess . run ([ 'systemctl' , 'stop' , self . _name ], check = True ) print ( f 'Stopped { self . _name } ' ) def restart ( self ) -> None : \"\"\" Restart systemd service \"\"\" subprocess . run ([ 'systemctl' , 'restart' , self . _name ], check = True ) print ( f 'Restarted { self . _name } ' ) def status ( self ) -> None : \"\"\" Status systemd service \"\"\" subprocess . run ([ 'systemctl' , 'status' , self . _name ], check = True ) print ( f 'Status { self . _name } ' ) def logs ( self ) -> None : \"\"\" Logs systemd service \"\"\" subprocess . run ([ 'journalctl' , '-u' , self . _name ], check = True ) print ( f 'Logs { self . _name } ' ) def __str__ ( self ) -> str : return self . _name def __repr__ ( self ) -> str : return self . __str__ () __init__ ( name ) Systemd daemon Parameters: Name Type Description Default name str Name of the systemd daemon required Source code in systemd_py/utils/daemon.py 9 10 11 12 13 14 15 16 17 def __init__ ( self , name : str ): \"\"\" Systemd daemon :param name: Name of the systemd daemon :type name: str \"\"\" self . _name = name disable () Disable systemd service Source code in systemd_py/utils/daemon.py 36 37 38 39 40 41 42 def disable ( self ) -> None : \"\"\" Disable systemd service \"\"\" subprocess . run ([ 'systemctl' , 'disable' , self . _name ], check = True ) print ( f 'Disabled { self . _name } ' ) enable () Enable systemd service Source code in systemd_py/utils/daemon.py 28 29 30 31 32 33 34 def enable ( self ) -> None : \"\"\" Enable systemd service \"\"\" subprocess . run ([ 'systemctl' , 'enable' , self . _name ], check = True ) print ( f 'Enabled { self . _name } ' ) logs () Logs systemd service Source code in systemd_py/utils/daemon.py 76 77 78 79 80 81 82 def logs ( self ) -> None : \"\"\" Logs systemd service \"\"\" subprocess . run ([ 'journalctl' , '-u' , self . _name ], check = True ) print ( f 'Logs { self . _name } ' ) reload () staticmethod Reload systemd daemon Source code in systemd_py/utils/daemon.py 19 20 21 22 23 24 25 26 @staticmethod def reload () -> None : \"\"\" Reload systemd daemon \"\"\" subprocess . run ([ 'systemctl' , 'daemon-reload' ], check = True ) print ( 'Reloaded systemd daemon' ) restart () Restart systemd service Source code in systemd_py/utils/daemon.py 60 61 62 63 64 65 66 def restart ( self ) -> None : \"\"\" Restart systemd service \"\"\" subprocess . run ([ 'systemctl' , 'restart' , self . _name ], check = True ) print ( f 'Restarted { self . _name } ' ) start () Start systemd service Source code in systemd_py/utils/daemon.py 44 45 46 47 48 49 50 def start ( self ) -> None : \"\"\" Start systemd service \"\"\" subprocess . run ([ 'systemctl' , 'start' , self . _name ], check = True ) print ( f 'Started { self . _name } ' ) status () Status systemd service Source code in systemd_py/utils/daemon.py 68 69 70 71 72 73 74 def status ( self ) -> None : \"\"\" Status systemd service \"\"\" subprocess . run ([ 'systemctl' , 'status' , self . _name ], check = True ) print ( f 'Status { self . _name } ' ) stop () Stop systemd service Source code in systemd_py/utils/daemon.py 52 53 54 55 56 57 58 def stop ( self ) -> None : \"\"\" Stop systemd service \"\"\" subprocess . run ([ 'systemctl' , 'stop' , self . _name ], check = True ) print ( f 'Stopped { self . _name } ' )","title":"daemon"},{"location":"reference/utils/daemon/#systemd_py.utils.daemon.Daemon","text":"Systemd daemon Source code in systemd_py/utils/daemon.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 class Daemon : \"\"\" Systemd daemon \"\"\" def __init__ ( self , name : str ): \"\"\" Systemd daemon :param name: Name of the systemd daemon :type name: str \"\"\" self . _name = name @staticmethod def reload () -> None : \"\"\" Reload systemd daemon \"\"\" subprocess . run ([ 'systemctl' , 'daemon-reload' ], check = True ) print ( 'Reloaded systemd daemon' ) def enable ( self ) -> None : \"\"\" Enable systemd service \"\"\" subprocess . run ([ 'systemctl' , 'enable' , self . _name ], check = True ) print ( f 'Enabled { self . _name } ' ) def disable ( self ) -> None : \"\"\" Disable systemd service \"\"\" subprocess . run ([ 'systemctl' , 'disable' , self . _name ], check = True ) print ( f 'Disabled { self . _name } ' ) def start ( self ) -> None : \"\"\" Start systemd service \"\"\" subprocess . run ([ 'systemctl' , 'start' , self . _name ], check = True ) print ( f 'Started { self . _name } ' ) def stop ( self ) -> None : \"\"\" Stop systemd service \"\"\" subprocess . run ([ 'systemctl' , 'stop' , self . _name ], check = True ) print ( f 'Stopped { self . _name } ' ) def restart ( self ) -> None : \"\"\" Restart systemd service \"\"\" subprocess . run ([ 'systemctl' , 'restart' , self . _name ], check = True ) print ( f 'Restarted { self . _name } ' ) def status ( self ) -> None : \"\"\" Status systemd service \"\"\" subprocess . run ([ 'systemctl' , 'status' , self . _name ], check = True ) print ( f 'Status { self . _name } ' ) def logs ( self ) -> None : \"\"\" Logs systemd service \"\"\" subprocess . run ([ 'journalctl' , '-u' , self . _name ], check = True ) print ( f 'Logs { self . _name } ' ) def __str__ ( self ) -> str : return self . _name def __repr__ ( self ) -> str : return self . __str__ ()","title":"Daemon"},{"location":"reference/utils/daemon/#systemd_py.utils.daemon.Daemon.__init__","text":"Systemd daemon Parameters: Name Type Description Default name str Name of the systemd daemon required Source code in systemd_py/utils/daemon.py 9 10 11 12 13 14 15 16 17 def __init__ ( self , name : str ): \"\"\" Systemd daemon :param name: Name of the systemd daemon :type name: str \"\"\" self . _name = name","title":"__init__()"},{"location":"reference/utils/daemon/#systemd_py.utils.daemon.Daemon.disable","text":"Disable systemd service Source code in systemd_py/utils/daemon.py 36 37 38 39 40 41 42 def disable ( self ) -> None : \"\"\" Disable systemd service \"\"\" subprocess . run ([ 'systemctl' , 'disable' , self . _name ], check = True ) print ( f 'Disabled { self . _name } ' )","title":"disable()"},{"location":"reference/utils/daemon/#systemd_py.utils.daemon.Daemon.enable","text":"Enable systemd service Source code in systemd_py/utils/daemon.py 28 29 30 31 32 33 34 def enable ( self ) -> None : \"\"\" Enable systemd service \"\"\" subprocess . run ([ 'systemctl' , 'enable' , self . _name ], check = True ) print ( f 'Enabled { self . _name } ' )","title":"enable()"},{"location":"reference/utils/daemon/#systemd_py.utils.daemon.Daemon.logs","text":"Logs systemd service Source code in systemd_py/utils/daemon.py 76 77 78 79 80 81 82 def logs ( self ) -> None : \"\"\" Logs systemd service \"\"\" subprocess . run ([ 'journalctl' , '-u' , self . _name ], check = True ) print ( f 'Logs { self . _name } ' )","title":"logs()"},{"location":"reference/utils/daemon/#systemd_py.utils.daemon.Daemon.reload","text":"Reload systemd daemon Source code in systemd_py/utils/daemon.py 19 20 21 22 23 24 25 26 @staticmethod def reload () -> None : \"\"\" Reload systemd daemon \"\"\" subprocess . run ([ 'systemctl' , 'daemon-reload' ], check = True ) print ( 'Reloaded systemd daemon' )","title":"reload()"},{"location":"reference/utils/daemon/#systemd_py.utils.daemon.Daemon.restart","text":"Restart systemd service Source code in systemd_py/utils/daemon.py 60 61 62 63 64 65 66 def restart ( self ) -> None : \"\"\" Restart systemd service \"\"\" subprocess . run ([ 'systemctl' , 'restart' , self . _name ], check = True ) print ( f 'Restarted { self . _name } ' )","title":"restart()"},{"location":"reference/utils/daemon/#systemd_py.utils.daemon.Daemon.start","text":"Start systemd service Source code in systemd_py/utils/daemon.py 44 45 46 47 48 49 50 def start ( self ) -> None : \"\"\" Start systemd service \"\"\" subprocess . run ([ 'systemctl' , 'start' , self . _name ], check = True ) print ( f 'Started { self . _name } ' )","title":"start()"},{"location":"reference/utils/daemon/#systemd_py.utils.daemon.Daemon.status","text":"Status systemd service Source code in systemd_py/utils/daemon.py 68 69 70 71 72 73 74 def status ( self ) -> None : \"\"\" Status systemd service \"\"\" subprocess . run ([ 'systemctl' , 'status' , self . _name ], check = True ) print ( f 'Status { self . _name } ' )","title":"status()"},{"location":"reference/utils/daemon/#systemd_py.utils.daemon.Daemon.stop","text":"Stop systemd service Source code in systemd_py/utils/daemon.py 52 53 54 55 56 57 58 def stop ( self ) -> None : \"\"\" Stop systemd service \"\"\" subprocess . run ([ 'systemctl' , 'stop' , self . _name ], check = True ) print ( f 'Stopped { self . _name } ' )","title":"stop()"},{"location":"reference/utils/files/","text":"get_file ( name , path ) Validate path Source code in systemd_py/utils/files.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def get_file ( name : str , path : Union [ str , Path ]) -> Path : \"\"\" Validate path \"\"\" if not name . endswith ( '.service' ): name += '.service' if isinstance ( path , str ): path = Path ( path ) path = path . resolve () if path . is_file (): path = path . parent return path / name","title":"files"},{"location":"reference/utils/files/#systemd_py.utils.files.get_file","text":"Validate path Source code in systemd_py/utils/files.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def get_file ( name : str , path : Union [ str , Path ]) -> Path : \"\"\" Validate path \"\"\" if not name . endswith ( '.service' ): name += '.service' if isinstance ( path , str ): path = Path ( path ) path = path . resolve () if path . is_file (): path = path . parent return path / name","title":"get_file()"},{"location":"reference/utils/terminal/","text":"","title":"terminal"},{"location":"reference/utils/terminal/clear/","text":"clear () Clear the terminal Returns: Type Description int The return code of the command Source code in systemd_py/utils/terminal/clear.py 5 6 7 8 9 10 11 12 13 14 15 16 17 def clear () -> int : \"\"\" Clear the terminal :return: The return code of the command :rtype: int \"\"\" if os . name == 'posix' : return subprocess . call ( 'clear' , shell = True ) if os . name == 'nt' : return subprocess . call ( 'cls' , shell = True ) raise Exception ( f 'Unknown OS: { os . name } ' )","title":"clear"},{"location":"reference/utils/terminal/clear/#systemd_py.utils.terminal.clear.clear","text":"Clear the terminal Returns: Type Description int The return code of the command Source code in systemd_py/utils/terminal/clear.py 5 6 7 8 9 10 11 12 13 14 15 16 17 def clear () -> int : \"\"\" Clear the terminal :return: The return code of the command :rtype: int \"\"\" if os . name == 'posix' : return subprocess . call ( 'clear' , shell = True ) if os . name == 'nt' : return subprocess . call ( 'cls' , shell = True ) raise Exception ( f 'Unknown OS: { os . name } ' )","title":"clear()"},{"location":"reference/utils/terminal/inputer/","text":"Inputer Source code in systemd_py/utils/terminal/inputer.pyclass Inputer : Empty = TypeVar ( \"Empty\" , str , None ) @staticmethod def input ( prompt : str , default : Any = None , choices : List [ Any ] = None , force : bool = False ) -> Any : \"\"\" Input a value from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: Any :param choices: The choices to display to the user :type choices: List[Any] :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: Any \"\"\" prompt = prompt . strip () if choices is None : choices = [] if default is not None : choices . append ( default ) if choices : prompt += f \" ( { ', ' . join ( str ( choice ) for choice in choices ) } )\" if not prompt . endswith ( \":\" ): prompt += \": \" if not prompt . endswith ( \" \" ): prompt += \" \" while True : value = input ( prompt ) if value : if choices : if force : if value not in choices : print ( f \"Invalid choice: { value } \" ) continue return value if default is not None : if default == Inputer . Empty : return None return default print ( f 'Invalid input: \" { value } \"' ) @staticmethod def input_bool ( prompt : str , default : bool = None , force : bool = False ) -> bool : \"\"\" Input a boolean value from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: bool :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: bool \"\"\" choices = [ \"y\" , \"n\" ] if default is not None : choices . append ( default ) value = Inputer . input ( prompt , choices = choices , force = force ) if value == \"y\" : return True if value == \"n\" : return False return default @staticmethod def input_int ( prompt : str , default : int = None , force : bool = False ) -> Optional [ int ]: \"\"\" Input an integer value from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: int :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: Optional[int] \"\"\" while True : value = Inputer . input ( prompt , default = default , force = force ) if value is Inputer . Empty : return None try : return int ( value ) except ( ValueError , TypeError ): print ( \"Invalid input\" ) @staticmethod def input_float ( prompt : str , default : float = None , force : bool = False ) -> float : \"\"\" Input a float value from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: float :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: float \"\"\" while True : value = Inputer . input ( prompt , default = default , force = force ) try : return float ( value ) except ValueError : print ( \"Invalid input\" ) @staticmethod def input_list ( prompt : str , default : List [ str ] = None , force : bool = False ) -> List [ str ]: \"\"\" Input a list of values from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: List[str] :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: List[str] \"\"\" if default is None : default = [] value = Inputer . input ( prompt , default = \",\" . join ( default ), force = force ) return value . split ( \",\" ) @staticmethod def input_dict ( prompt : str , default : Dict [ str , str ] = None , force : bool = False ) -> Dict [ str , str ]: \"\"\" Input a dictionary of values from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: Dict[str, str] :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: Dict[str, str] \"\"\" if default is None : default = {} value = Inputer . input ( prompt , default = \",\" . join ( f \" { key } = { value } \" for key , value in default . items ()), force = force ) return { key : value for key , value in ( item . split ( \"=\" ) for item in value . split ( \",\" ))} @staticmethod def input_choice ( prompt : str , choices : List [ Any ], default : Any = None , force : bool = False ) -> Any : \"\"\" Input a choice from the user :param prompt: The prompt to display to the user :type prompt: str :param choices: The choices to display to the user :type choices: List[Any] :param default: The default value to use if the user does not input anything :type default: Any :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: Any \"\"\" if default is not None : choices . append ( default ) value = Inputer . input ( prompt , choices = choices , force = force ) if value in choices : return value return default @staticmethod def input_choice_bool ( prompt : str , choices : List [ bool ], default : bool = None , force : bool = False ) -> bool : \"\"\" Input a choice from the user :param prompt: The prompt to display to the user :type prompt: str :param choices: The choices to display to the user :type choices: List[bool] :param default: The default value to use if the user does not input anything :type default: bool :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: bool \"\"\" if default is not None : choices . append ( default ) value = Inputer . input ( prompt , choices = choices , force = force ) if value in choices : return value return default input ( prompt , default = None , choices = None , force = False ) staticmethod Input a value from the user Parameters: Name Type Description Default prompt str The prompt to display to the user required default Any The default value to use if the user does not input anything None choices List [ Any ] The choices to display to the user None force bool Force the user to input a value that exist in choices False Returns: Type Description Any The value the user input Source code in systemd_py/utils/terminal/inputer.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 @staticmethod def input ( prompt : str , default : Any = None , choices : List [ Any ] = None , force : bool = False ) -> Any : \"\"\" Input a value from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: Any :param choices: The choices to display to the user :type choices: List[Any] :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: Any \"\"\" prompt = prompt . strip () if choices is None : choices = [] if default is not None : choices . append ( default ) if choices : prompt += f \" ( { ', ' . join ( str ( choice ) for choice in choices ) } )\" if not prompt . endswith ( \":\" ): prompt += \": \" if not prompt . endswith ( \" \" ): prompt += \" \" while True : value = input ( prompt ) if value : if choices : if force : if value not in choices : print ( f \"Invalid choice: { value } \" ) continue return value if default is not None : if default == Inputer . Empty : return None return default print ( f 'Invalid input: \" { value } \"' ) input_bool ( prompt , default = None , force = False ) staticmethod Input a boolean value from the user Parameters: Name Type Description Default prompt str The prompt to display to the user required default bool The default value to use if the user does not input anything None force bool Force the user to input a value that exist in choices False Returns: Type Description bool The value the user input Source code in systemd_py/utils/terminal/inputer.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 @staticmethod def input_bool ( prompt : str , default : bool = None , force : bool = False ) -> bool : \"\"\" Input a boolean value from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: bool :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: bool \"\"\" choices = [ \"y\" , \"n\" ] if default is not None : choices . append ( default ) value = Inputer . input ( prompt , choices = choices , force = force ) if value == \"y\" : return True if value == \"n\" : return False return default input_choice ( prompt , choices , default = None , force = False ) staticmethod Input a choice from the user Parameters: Name Type Description Default prompt str The prompt to display to the user required choices List [ Any ] The choices to display to the user required default Any The default value to use if the user does not input anything None force bool Force the user to input a value that exist in choices False Returns: Type Description Any The value the user input Source code in systemd_py/utils/terminal/inputer.py 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 @staticmethod def input_choice ( prompt : str , choices : List [ Any ], default : Any = None , force : bool = False ) -> Any : \"\"\" Input a choice from the user :param prompt: The prompt to display to the user :type prompt: str :param choices: The choices to display to the user :type choices: List[Any] :param default: The default value to use if the user does not input anything :type default: Any :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: Any \"\"\" if default is not None : choices . append ( default ) value = Inputer . input ( prompt , choices = choices , force = force ) if value in choices : return value return default input_choice_bool ( prompt , choices , default = None , force = False ) staticmethod Input a choice from the user Parameters: Name Type Description Default prompt str The prompt to display to the user required choices List [ bool ] The choices to display to the user required default bool The default value to use if the user does not input anything None force bool Force the user to input a value that exist in choices False Returns: Type Description bool The value the user input Source code in systemd_py/utils/terminal/inputer.py 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 @staticmethod def input_choice_bool ( prompt : str , choices : List [ bool ], default : bool = None , force : bool = False ) -> bool : \"\"\" Input a choice from the user :param prompt: The prompt to display to the user :type prompt: str :param choices: The choices to display to the user :type choices: List[bool] :param default: The default value to use if the user does not input anything :type default: bool :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: bool \"\"\" if default is not None : choices . append ( default ) value = Inputer . input ( prompt , choices = choices , force = force ) if value in choices : return value return default input_dict ( prompt , default = None , force = False ) staticmethod Input a dictionary of values from the user Parameters: Name Type Description Default prompt str The prompt to display to the user required default Dict [ str , str ] The default value to use if the user does not input anything None force bool Force the user to input a value that exist in choices False Returns: Type Description Dict[str, str] The value the user input Source code in systemd_py/utils/terminal/inputer.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 @staticmethod def input_dict ( prompt : str , default : Dict [ str , str ] = None , force : bool = False ) -> Dict [ str , str ]: \"\"\" Input a dictionary of values from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: Dict[str, str] :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: Dict[str, str] \"\"\" if default is None : default = {} value = Inputer . input ( prompt , default = \",\" . join ( f \" { key } = { value } \" for key , value in default . items ()), force = force ) return { key : value for key , value in ( item . split ( \"=\" ) for item in value . split ( \",\" ))} input_float ( prompt , default = None , force = False ) staticmethod Input a float value from the user Parameters: Name Type Description Default prompt str The prompt to display to the user required default float The default value to use if the user does not input anything None force bool Force the user to input a value that exist in choices False Returns: Type Description float The value the user input Source code in systemd_py/utils/terminal/inputer.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 @staticmethod def input_float ( prompt : str , default : float = None , force : bool = False ) -> float : \"\"\" Input a float value from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: float :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: float \"\"\" while True : value = Inputer . input ( prompt , default = default , force = force ) try : return float ( value ) except ValueError : print ( \"Invalid input\" ) input_int ( prompt , default = None , force = False ) staticmethod Input an integer value from the user Parameters: Name Type Description Default prompt str The prompt to display to the user required default int The default value to use if the user does not input anything None force bool Force the user to input a value that exist in choices False Returns: Type Description Optional[int] The value the user input Source code in systemd_py/utils/terminal/inputer.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 @staticmethod def input_int ( prompt : str , default : int = None , force : bool = False ) -> Optional [ int ]: \"\"\" Input an integer value from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: int :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: Optional[int] \"\"\" while True : value = Inputer . input ( prompt , default = default , force = force ) if value is Inputer . Empty : return None try : return int ( value ) except ( ValueError , TypeError ): print ( \"Invalid input\" ) input_list ( prompt , default = None , force = False ) staticmethod Input a list of values from the user Parameters: Name Type Description Default prompt str The prompt to display to the user required default List [ str ] The default value to use if the user does not input anything None force bool Force the user to input a value that exist in choices False Returns: Type Description List[str] The value the user input Source code in systemd_py/utils/terminal/inputer.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 @staticmethod def input_list ( prompt : str , default : List [ str ] = None , force : bool = False ) -> List [ str ]: \"\"\" Input a list of values from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: List[str] :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: List[str] \"\"\" if default is None : default = [] value = Inputer . input ( prompt , default = \",\" . join ( default ), force = force ) return value . split ( \",\" )","title":"inputer"},{"location":"reference/utils/terminal/inputer/#systemd_py.utils.terminal.inputer.Inputer","text":"Source code in systemd_py/utils/terminal/inputer.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 class Inputer : Empty = TypeVar ( \"Empty\" , str , None ) @staticmethod def input ( prompt : str , default : Any = None , choices : List [ Any ] = None , force : bool = False ) -> Any : \"\"\" Input a value from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: Any :param choices: The choices to display to the user :type choices: List[Any] :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: Any \"\"\" prompt = prompt . strip () if choices is None : choices = [] if default is not None : choices . append ( default ) if choices : prompt += f \" ( { ', ' . join ( str ( choice ) for choice in choices ) } )\" if not prompt . endswith ( \":\" ): prompt += \": \" if not prompt . endswith ( \" \" ): prompt += \" \" while True : value = input ( prompt ) if value : if choices : if force : if value not in choices : print ( f \"Invalid choice: { value } \" ) continue return value if default is not None : if default == Inputer . Empty : return None return default print ( f 'Invalid input: \" { value } \"' ) @staticmethod def input_bool ( prompt : str , default : bool = None , force : bool = False ) -> bool : \"\"\" Input a boolean value from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: bool :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: bool \"\"\" choices = [ \"y\" , \"n\" ] if default is not None : choices . append ( default ) value = Inputer . input ( prompt , choices = choices , force = force ) if value == \"y\" : return True if value == \"n\" : return False return default @staticmethod def input_int ( prompt : str , default : int = None , force : bool = False ) -> Optional [ int ]: \"\"\" Input an integer value from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: int :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: Optional[int] \"\"\" while True : value = Inputer . input ( prompt , default = default , force = force ) if value is Inputer . Empty : return None try : return int ( value ) except ( ValueError , TypeError ): print ( \"Invalid input\" ) @staticmethod def input_float ( prompt : str , default : float = None , force : bool = False ) -> float : \"\"\" Input a float value from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: float :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: float \"\"\" while True : value = Inputer . input ( prompt , default = default , force = force ) try : return float ( value ) except ValueError : print ( \"Invalid input\" ) @staticmethod def input_list ( prompt : str , default : List [ str ] = None , force : bool = False ) -> List [ str ]: \"\"\" Input a list of values from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: List[str] :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: List[str] \"\"\" if default is None : default = [] value = Inputer . input ( prompt , default = \",\" . join ( default ), force = force ) return value . split ( \",\" ) @staticmethod def input_dict ( prompt : str , default : Dict [ str , str ] = None , force : bool = False ) -> Dict [ str , str ]: \"\"\" Input a dictionary of values from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: Dict[str, str] :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: Dict[str, str] \"\"\" if default is None : default = {} value = Inputer . input ( prompt , default = \",\" . join ( f \" { key } = { value } \" for key , value in default . items ()), force = force ) return { key : value for key , value in ( item . split ( \"=\" ) for item in value . split ( \",\" ))} @staticmethod def input_choice ( prompt : str , choices : List [ Any ], default : Any = None , force : bool = False ) -> Any : \"\"\" Input a choice from the user :param prompt: The prompt to display to the user :type prompt: str :param choices: The choices to display to the user :type choices: List[Any] :param default: The default value to use if the user does not input anything :type default: Any :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: Any \"\"\" if default is not None : choices . append ( default ) value = Inputer . input ( prompt , choices = choices , force = force ) if value in choices : return value return default @staticmethod def input_choice_bool ( prompt : str , choices : List [ bool ], default : bool = None , force : bool = False ) -> bool : \"\"\" Input a choice from the user :param prompt: The prompt to display to the user :type prompt: str :param choices: The choices to display to the user :type choices: List[bool] :param default: The default value to use if the user does not input anything :type default: bool :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: bool \"\"\" if default is not None : choices . append ( default ) value = Inputer . input ( prompt , choices = choices , force = force ) if value in choices : return value return default","title":"Inputer"},{"location":"reference/utils/terminal/inputer/#systemd_py.utils.terminal.inputer.Inputer.input","text":"Input a value from the user Parameters: Name Type Description Default prompt str The prompt to display to the user required default Any The default value to use if the user does not input anything None choices List [ Any ] The choices to display to the user None force bool Force the user to input a value that exist in choices False Returns: Type Description Any The value the user input Source code in systemd_py/utils/terminal/inputer.py 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 @staticmethod def input ( prompt : str , default : Any = None , choices : List [ Any ] = None , force : bool = False ) -> Any : \"\"\" Input a value from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: Any :param choices: The choices to display to the user :type choices: List[Any] :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: Any \"\"\" prompt = prompt . strip () if choices is None : choices = [] if default is not None : choices . append ( default ) if choices : prompt += f \" ( { ', ' . join ( str ( choice ) for choice in choices ) } )\" if not prompt . endswith ( \":\" ): prompt += \": \" if not prompt . endswith ( \" \" ): prompt += \" \" while True : value = input ( prompt ) if value : if choices : if force : if value not in choices : print ( f \"Invalid choice: { value } \" ) continue return value if default is not None : if default == Inputer . Empty : return None return default print ( f 'Invalid input: \" { value } \"' )","title":"input()"},{"location":"reference/utils/terminal/inputer/#systemd_py.utils.terminal.inputer.Inputer.input_bool","text":"Input a boolean value from the user Parameters: Name Type Description Default prompt str The prompt to display to the user required default bool The default value to use if the user does not input anything None force bool Force the user to input a value that exist in choices False Returns: Type Description bool The value the user input Source code in systemd_py/utils/terminal/inputer.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 @staticmethod def input_bool ( prompt : str , default : bool = None , force : bool = False ) -> bool : \"\"\" Input a boolean value from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: bool :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: bool \"\"\" choices = [ \"y\" , \"n\" ] if default is not None : choices . append ( default ) value = Inputer . input ( prompt , choices = choices , force = force ) if value == \"y\" : return True if value == \"n\" : return False return default","title":"input_bool()"},{"location":"reference/utils/terminal/inputer/#systemd_py.utils.terminal.inputer.Inputer.input_choice","text":"Input a choice from the user Parameters: Name Type Description Default prompt str The prompt to display to the user required choices List [ Any ] The choices to display to the user required default Any The default value to use if the user does not input anything None force bool Force the user to input a value that exist in choices False Returns: Type Description Any The value the user input Source code in systemd_py/utils/terminal/inputer.py 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 @staticmethod def input_choice ( prompt : str , choices : List [ Any ], default : Any = None , force : bool = False ) -> Any : \"\"\" Input a choice from the user :param prompt: The prompt to display to the user :type prompt: str :param choices: The choices to display to the user :type choices: List[Any] :param default: The default value to use if the user does not input anything :type default: Any :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: Any \"\"\" if default is not None : choices . append ( default ) value = Inputer . input ( prompt , choices = choices , force = force ) if value in choices : return value return default","title":"input_choice()"},{"location":"reference/utils/terminal/inputer/#systemd_py.utils.terminal.inputer.Inputer.input_choice_bool","text":"Input a choice from the user Parameters: Name Type Description Default prompt str The prompt to display to the user required choices List [ bool ] The choices to display to the user required default bool The default value to use if the user does not input anything None force bool Force the user to input a value that exist in choices False Returns: Type Description bool The value the user input Source code in systemd_py/utils/terminal/inputer.py 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 @staticmethod def input_choice_bool ( prompt : str , choices : List [ bool ], default : bool = None , force : bool = False ) -> bool : \"\"\" Input a choice from the user :param prompt: The prompt to display to the user :type prompt: str :param choices: The choices to display to the user :type choices: List[bool] :param default: The default value to use if the user does not input anything :type default: bool :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: bool \"\"\" if default is not None : choices . append ( default ) value = Inputer . input ( prompt , choices = choices , force = force ) if value in choices : return value return default","title":"input_choice_bool()"},{"location":"reference/utils/terminal/inputer/#systemd_py.utils.terminal.inputer.Inputer.input_dict","text":"Input a dictionary of values from the user Parameters: Name Type Description Default prompt str The prompt to display to the user required default Dict [ str , str ] The default value to use if the user does not input anything None force bool Force the user to input a value that exist in choices False Returns: Type Description Dict[str, str] The value the user input Source code in systemd_py/utils/terminal/inputer.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 @staticmethod def input_dict ( prompt : str , default : Dict [ str , str ] = None , force : bool = False ) -> Dict [ str , str ]: \"\"\" Input a dictionary of values from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: Dict[str, str] :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: Dict[str, str] \"\"\" if default is None : default = {} value = Inputer . input ( prompt , default = \",\" . join ( f \" { key } = { value } \" for key , value in default . items ()), force = force ) return { key : value for key , value in ( item . split ( \"=\" ) for item in value . split ( \",\" ))}","title":"input_dict()"},{"location":"reference/utils/terminal/inputer/#systemd_py.utils.terminal.inputer.Inputer.input_float","text":"Input a float value from the user Parameters: Name Type Description Default prompt str The prompt to display to the user required default float The default value to use if the user does not input anything None force bool Force the user to input a value that exist in choices False Returns: Type Description float The value the user input Source code in systemd_py/utils/terminal/inputer.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 @staticmethod def input_float ( prompt : str , default : float = None , force : bool = False ) -> float : \"\"\" Input a float value from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: float :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: float \"\"\" while True : value = Inputer . input ( prompt , default = default , force = force ) try : return float ( value ) except ValueError : print ( \"Invalid input\" )","title":"input_float()"},{"location":"reference/utils/terminal/inputer/#systemd_py.utils.terminal.inputer.Inputer.input_int","text":"Input an integer value from the user Parameters: Name Type Description Default prompt str The prompt to display to the user required default int The default value to use if the user does not input anything None force bool Force the user to input a value that exist in choices False Returns: Type Description Optional[int] The value the user input Source code in systemd_py/utils/terminal/inputer.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 @staticmethod def input_int ( prompt : str , default : int = None , force : bool = False ) -> Optional [ int ]: \"\"\" Input an integer value from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: int :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: Optional[int] \"\"\" while True : value = Inputer . input ( prompt , default = default , force = force ) if value is Inputer . Empty : return None try : return int ( value ) except ( ValueError , TypeError ): print ( \"Invalid input\" )","title":"input_int()"},{"location":"reference/utils/terminal/inputer/#systemd_py.utils.terminal.inputer.Inputer.input_list","text":"Input a list of values from the user Parameters: Name Type Description Default prompt str The prompt to display to the user required default List [ str ] The default value to use if the user does not input anything None force bool Force the user to input a value that exist in choices False Returns: Type Description List[str] The value the user input Source code in systemd_py/utils/terminal/inputer.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 @staticmethod def input_list ( prompt : str , default : List [ str ] = None , force : bool = False ) -> List [ str ]: \"\"\" Input a list of values from the user :param prompt: The prompt to display to the user :type prompt: str :param default: The default value to use if the user does not input anything :type default: List[str] :param force: Force the user to input a value that exist in choices :type force: bool :return: The value the user input :rtype: List[str] \"\"\" if default is None : default = [] value = Inputer . input ( prompt , default = \",\" . join ( default ), force = force ) return value . split ( \",\" )","title":"input_list()"}]}